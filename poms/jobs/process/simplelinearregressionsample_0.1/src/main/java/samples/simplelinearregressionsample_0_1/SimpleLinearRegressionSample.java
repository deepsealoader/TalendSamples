// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package samples.simplelinearregressionsample_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: SimpleLinearRegressionSample Purpose: Demonstrate the usage of SLR
 * algorithm<br>
 * Description: Demonstrate the usage of SLR algorithm on x62 dataset <br>
 * 
 * @author romualdrousseau@gmail.com
 * @version 7.3.1.20200219_1130
 * @status DEV
 */
public class SimpleLinearRegressionSample implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "SimpleLinearRegressionSample";
	private final String projectName = "SAMPLES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_rXHRsLoUEeiTnveA9Ky8_A", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					SimpleLinearRegressionSample.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(SimpleLinearRegressionSample.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tChronometerStop_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tShujuTrain_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tShujuPredict_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tShujuPredict_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tShujuTransformDataSet_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tShujuTransformDataSet_row7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tShujuTransform_2_TransformOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tShujuTransform_2_TransformIn_error(exception, errorComponent, globalMap);

	}

	public void tShujuTransform_2_TransformIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tShujuTransform_3_TransformOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tShujuTransform_3_TransformIn_error(exception, errorComponent, globalMap);

	}

	public void tShujuTransform_3_TransformIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tChronometerStop_1 begin ] start
				 */

				ok_Hash.put("tChronometerStop_1", false);
				start_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				currentComponent = "tChronometerStop_1";

				int tos_count_tChronometerStop_1 = 0;

				long timetChronometerStop_1;

				timetChronometerStop_1 = System.currentTimeMillis() - startTime;

				System.out.print("[ tChronometerStop_1 ]  ");

				System.out.print("   " + timetChronometerStop_1 / 1000 + "seconds   ");

				System.out.println("" + "  " + timetChronometerStop_1 + " milliseconds");

				Long currentTimetChronometerStop_1 = System.currentTimeMillis();
				globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);

				globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
				globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);

				/**
				 * [tChronometerStop_1 begin ] stop
				 */

				/**
				 * [tChronometerStop_1 main ] start
				 */

				currentComponent = "tChronometerStop_1";

				tos_count_tChronometerStop_1++;

				/**
				 * [tChronometerStop_1 main ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_begin ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_begin ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_end ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_end ] stop
				 */

				/**
				 * [tChronometerStop_1 end ] start
				 */

				currentComponent = "tChronometerStop_1";

				ok_Hash.put("tChronometerStop_1", true);
				end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				/**
				 * [tChronometerStop_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tChronometerStop_1 finally ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double I;

		public double getI() {
			return this.I;
		}

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.I = dis.readDouble();

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.I);

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("I=" + String.valueOf(I));
			sb.append(",T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row18Struct row18 = new row18Struct();
				row18Struct row2 = row18;

				/**
				 * [tShujuTrain_1 begin ] start
				 */

				ok_Hash.put("tShujuTrain_1", false);
				start_Hash.put("tShujuTrain_1", System.currentTimeMillis());

				currentComponent = "tShujuTrain_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tShujuTrain_1 = 0;

				int nb_line_tShujuTrain_1 = 0;

				com.github.romualdrousseau.shuju.DataSet dataset_tShujuTrain_1 = new com.github.romualdrousseau.shuju.DataSet();

				/**
				 * [tShujuTrain_1 begin ] stop
				 */

				/**
				 * [tFlowMeter_1 begin ] start
				 */

				ok_Hash.put("tFlowMeter_1", false);
				start_Hash.put("tFlowMeter_1", System.currentTimeMillis());

				currentComponent = "tFlowMeter_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tFlowMeter_1 = 0;

				int count_tFlowMeter_1 = 0;

				/**
				 * [tFlowMeter_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				row18Struct row18_tmp = new row18Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/RRU_SG1/Projects/Talend/workspace/SAMPLES/data/x62.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/RRU_SG1/Projects/Talend/workspace/SAMPLES/data/x62.csv", "ISO-8859-15", ",",
								"\n", true, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.I = ParserUtils.parseTo_double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"I", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'I' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.T = ParserUtils.parseTo_double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"T", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'T' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.D = ParserUtils.parseTo_double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"D", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'D' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								row18 = null;

// # Output table : 'row18'
								row18_tmp.T = row1.T - 1.0;
								row18_tmp.D = row1.D;
								row18 = row18_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "row18"
							if (row18 != null) {

								/**
								 * [tFlowMeter_1 main ] start
								 */

								currentComponent = "tFlowMeter_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row18");
								}

								count_tFlowMeter_1++;

								row2 = row18;

								tos_count_tFlowMeter_1++;

								/**
								 * [tFlowMeter_1 main ] stop
								 */

								/**
								 * [tFlowMeter_1 process_data_begin ] start
								 */

								currentComponent = "tFlowMeter_1";

								/**
								 * [tFlowMeter_1 process_data_begin ] stop
								 */

								/**
								 * [tShujuTrain_1 main ] start
								 */

								currentComponent = "tShujuTrain_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
								}

								com.github.romualdrousseau.shuju.DataRow row_tShujuTrain_1 = new com.github.romualdrousseau.shuju.DataRow();
								com.github.romualdrousseau.shuju.features.NumericFeature feature_T_tShujuTrain_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
										row2.T);
								row_tShujuTrain_1.addFeature(feature_T_tShujuTrain_1);
								com.github.romualdrousseau.shuju.features.NumericFeature feature_D_tShujuTrain_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
										row2.D);
								row_tShujuTrain_1.setLabel(feature_D_tShujuTrain_1);
								dataset_tShujuTrain_1.addRow(row_tShujuTrain_1);

								nb_line_tShujuTrain_1++;

								tos_count_tShujuTrain_1++;

								/**
								 * [tShujuTrain_1 main ] stop
								 */

								/**
								 * [tShujuTrain_1 process_data_begin ] start
								 */

								currentComponent = "tShujuTrain_1";

								/**
								 * [tShujuTrain_1 process_data_begin ] stop
								 */

								/**
								 * [tShujuTrain_1 process_data_end ] start
								 */

								currentComponent = "tShujuTrain_1";

								/**
								 * [tShujuTrain_1 process_data_end ] stop
								 */

								/**
								 * [tFlowMeter_1 process_data_end ] start
								 */

								currentComponent = "tFlowMeter_1";

								/**
								 * [tFlowMeter_1 process_data_end ] stop
								 */

							} // End of branch "row18"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/RRU_SG1/Projects/Talend/workspace/SAMPLES/data/x62.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFlowMeter_1 end ] start
				 */

				currentComponent = "tFlowMeter_1";

				tFlowMeterCatcher_1.addMessage("row18", new Integer(count_tFlowMeter_1), "null", "", "tFlowMeter_1");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tFlowMeter_1", true);
				end_Hash.put("tFlowMeter_1", System.currentTimeMillis());

				/**
				 * [tFlowMeter_1 end ] stop
				 */

				/**
				 * [tShujuTrain_1 end ] start
				 */

				currentComponent = "tShujuTrain_1";

				class tShujuTrain_1ClassifierFactory {
					public com.github.romualdrousseau.shuju.IClassifier getInstance() {
						return new com.github.romualdrousseau.shuju.ml.slr.SLR();
					}
				}
				com.github.romualdrousseau.shuju.IClassifier classifier_tShujuTrain_1 = new tShujuTrain_1ClassifierFactory()
						.getInstance();

				classifier_tShujuTrain_1.train(dataset_tShujuTrain_1);

				globalMap.put("classifier_tShujuTrain_1", classifier_tShujuTrain_1);
				globalMap.put("tShujuTrain_1_NB_LINE", nb_line_tShujuTrain_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tShujuTrain_1", true);
				end_Hash.put("tShujuTrain_1", System.currentTimeMillis());

				/**
				 * [tShujuTrain_1 end ] stop
				 */

			} // end the resume

			tFlowMeterCatcher_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileInputDelimited_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFlowMeter_1 finally ] start
				 */

				currentComponent = "tFlowMeter_1";

				/**
				 * [tFlowMeter_1 finally ] stop
				 */

				/**
				 * [tShujuTrain_1 finally ] start
				 */

				currentComponent = "tShujuTrain_1";

				/**
				 * [tShujuTrain_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtShujuTransform_3
			implements routines.system.IPersistableRow<OnRowsEndStructtShujuTransform_3> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtShujuTransform_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtShujuTransform_2
			implements routines.system.IPersistableRow<OnRowsEndStructtShujuTransform_2> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtShujuTransform_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double I;

		public double getI() {
			return this.I;
		}

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.I = dis.readDouble();

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.I);

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("I=" + String.valueOf(I));
			sb.append(",T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public double I;

		public double getI() {
			return this.I;
		}

		public double T;

		public double getT() {
			return this.T;
		}

		public double D;

		public double getD() {
			return this.D;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.I = dis.readDouble();

					this.T = dis.readDouble();

					this.D = dis.readDouble();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.I);

				// double

				dos.writeDouble(this.T);

				// double

				dos.writeDouble(this.D);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("I=" + String.valueOf(I));
			sb.append(",T=" + String.valueOf(T));
			sb.append(",D=" + String.valueOf(D));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tRowGenerator_1Process(globalMap);
				tRowGenerator_2Process(globalMap);

				row6Struct row6 = new row6Struct();
				row17Struct row17 = new row17Struct();
				row17Struct row8 = row17;
				row17Struct row14 = row17;
				row17Struct row15 = row17;
				row9Struct row9 = new row9Struct();
				row11Struct row11 = new row11Struct();
				row11Struct row10 = row11;
				row11Struct row12 = row11;

				/**
				 * [tShujuTransform_2_TransformOut begin ] start
				 */

				ok_Hash.put("tShujuTransform_2_TransformOut", false);
				start_Hash.put("tShujuTransform_2_TransformOut", System.currentTimeMillis());

				currentVirtualComponent = "tShujuTransform_2";

				currentComponent = "tShujuTransform_2_TransformOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tShujuTransform_2_TransformOut = 0;

				int nb_line_tShujuTransform_2_TransformOut = 0;

				com.github.romualdrousseau.shuju.DataSet dataset_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.DataSet();

				com.github.romualdrousseau.shuju.DataSet another_dataset_tShujuTransform_2_TransformOut = null;

				/**
				 * [tShujuTransform_2_TransformOut begin ] stop
				 */

				/**
				 * [tFileOutputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_2", false);
				start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tFileOutputExcel_2 = 0;

				int columnIndex_tFileOutputExcel_2 = 0;

				String fileName_tFileOutputExcel_2 = "C:/Users/RRU_SG1/Documents/out.xls";
				int nb_line_tFileOutputExcel_2 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_2.setSheet("Sheet1");
				xlsxTool_tFileOutputExcel_2.setAppend(false, false);
				xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_2.setXY(false, 0, 0, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_2) {

					xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);

				}

				xlsxTool_tFileOutputExcel_2.setFont("");

				if (xlsxTool_tFileOutputExcel_2.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_2.addRow();

					xlsxTool_tFileOutputExcel_2.addCellValue("T");

					xlsxTool_tFileOutputExcel_2.addCellValue("D");

					nb_line_tFileOutputExcel_2++;

				}

				/**
				 * [tFileOutputExcel_2 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tFlowMeter_19 begin ] start
				 */

				ok_Hash.put("tFlowMeter_19", false);
				start_Hash.put("tFlowMeter_19", System.currentTimeMillis());

				currentComponent = "tFlowMeter_19";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tFlowMeter_19 = 0;

				int count_tFlowMeter_19 = 0;

				/**
				 * [tFlowMeter_19 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				row17Struct row17_tmp = new row17Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Users/RRU_SG1/Projects/Talend/workspace/SAMPLES/data/x62.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/RRU_SG1/Projects/Talend/workspace/SAMPLES/data/x62.csv", "ISO-8859-15", ",",
								"\n", true, 1, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row6 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row6 = new row6Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row6.I = ParserUtils.parseTo_double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"I", "row6", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}

							} else {

								rowstate_tFileInputDelimited_2.setException(new RuntimeException(
										"Value is empty for column : 'I' in 'row6' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row6.T = ParserUtils.parseTo_double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"T", "row6", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}

							} else {

								rowstate_tFileInputDelimited_2.setException(new RuntimeException(
										"Value is empty for column : 'T' in 'row6' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 2;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row6.D = ParserUtils.parseTo_double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"D", "row6", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}

							} else {

								rowstate_tFileInputDelimited_2.setException(new RuntimeException(
										"Value is empty for column : 'D' in 'row6' connection, value is invalid or this column should be nullable or have a default value."));

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row6 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								row17 = null;

// # Output table : 'row17'
								row17_tmp.T = row6.T - 1.0;
								row17_tmp.D = row6.D;
								row17 = row17_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "row17"
							if (row17 != null) {

								/**
								 * [tFlowMeter_19 main ] start
								 */

								currentComponent = "tFlowMeter_19";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row17");
								}

								count_tFlowMeter_19++;

								row8 = row17;

								tos_count_tFlowMeter_19++;

								/**
								 * [tFlowMeter_19 main ] stop
								 */

								/**
								 * [tFlowMeter_19 process_data_begin ] start
								 */

								currentComponent = "tFlowMeter_19";

								/**
								 * [tFlowMeter_19 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_3 main ] start
								 */

								currentComponent = "tLogRow_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
								}

///////////////////////		

								strBuffer_tLogRow_3 = new StringBuilder();

								strBuffer_tLogRow_3.append(FormatterUtils.formatUnwithE(row8.T));

								strBuffer_tLogRow_3.append("|");

								strBuffer_tLogRow_3.append(FormatterUtils.formatUnwithE(row8.D));

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_3 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
								}
								consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
								consoleOut_tLogRow_3.flush();
								nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

								row14 = row8;

								tos_count_tLogRow_3++;

								/**
								 * [tLogRow_3 main ] stop
								 */

								/**
								 * [tLogRow_3 process_data_begin ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputExcel_2 main ] start
								 */

								currentComponent = "tFileOutputExcel_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
								}

								xlsxTool_tFileOutputExcel_2.addRow();

								xlsxTool_tFileOutputExcel_2.addCellValue(row14.T);

								xlsxTool_tFileOutputExcel_2.addCellValue(row14.D);
								nb_line_tFileOutputExcel_2++;

								row15 = row14;

								tos_count_tFileOutputExcel_2++;

								/**
								 * [tFileOutputExcel_2 main ] stop
								 */

								/**
								 * [tFileOutputExcel_2 process_data_begin ] start
								 */

								currentComponent = "tFileOutputExcel_2";

								/**
								 * [tFileOutputExcel_2 process_data_begin ] stop
								 */

								/**
								 * [tShujuTransform_2_TransformOut main ] start
								 */

								currentVirtualComponent = "tShujuTransform_2";

								currentComponent = "tShujuTransform_2_TransformOut";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
								}

								com.github.romualdrousseau.shuju.DataRow row_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.DataRow();
								com.github.romualdrousseau.shuju.features.NumericFeature feature_T_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.features.NumericFeature(
										row17.T);
								row_tShujuTransform_2_TransformOut.addFeature(feature_T_tShujuTransform_2_TransformOut);
								com.github.romualdrousseau.shuju.features.NumericFeature feature_D_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.features.NumericFeature(
										row17.D);
								row_tShujuTransform_2_TransformOut.setLabel(feature_D_tShujuTransform_2_TransformOut);
								dataset_tShujuTransform_2_TransformOut.addRow(row_tShujuTransform_2_TransformOut);

								nb_line_tShujuTransform_2_TransformOut++;

								tos_count_tShujuTransform_2_TransformOut++;

								/**
								 * [tShujuTransform_2_TransformOut main ] stop
								 */

								/**
								 * [tShujuTransform_2_TransformOut process_data_begin ] start
								 */

								currentVirtualComponent = "tShujuTransform_2";

								currentComponent = "tShujuTransform_2_TransformOut";

								/**
								 * [tShujuTransform_2_TransformOut process_data_begin ] stop
								 */

								/**
								 * [tShujuTransform_2_TransformOut process_data_end ] start
								 */

								currentVirtualComponent = "tShujuTransform_2";

								currentComponent = "tShujuTransform_2_TransformOut";

								/**
								 * [tShujuTransform_2_TransformOut process_data_end ] stop
								 */

								/**
								 * [tFileOutputExcel_2 process_data_end ] start
								 */

								currentComponent = "tFileOutputExcel_2";

								/**
								 * [tFileOutputExcel_2 process_data_end ] stop
								 */

								/**
								 * [tLogRow_3 process_data_end ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_end ] stop
								 */

								/**
								 * [tFlowMeter_19 process_data_end ] start
								 */

								currentComponent = "tFlowMeter_19";

								/**
								 * [tFlowMeter_19 process_data_end ] stop
								 */

							} // End of branch "row17"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Users/RRU_SG1/Projects/Talend/workspace/SAMPLES/data/x62.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFlowMeter_19 end ] start
				 */

				currentComponent = "tFlowMeter_19";

				tFlowMeterCatcher_1.addMessage("row17", new Integer(count_tFlowMeter_19), "null", "", "tFlowMeter_19");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tFlowMeter_19", true);
				end_Hash.put("tFlowMeter_19", System.currentTimeMillis());

				/**
				 * [tFlowMeter_19 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 end ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2, true);

				nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 - 1;

				globalMap.put("tFileOutputExcel_2_NB_LINE", nb_line_tFileOutputExcel_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tFileOutputExcel_2", true);
				end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_2 end ] stop
				 */

				/**
				 * [tShujuTransform_2_TransformOut end ] start
				 */

				currentVirtualComponent = "tShujuTransform_2";

				currentComponent = "tShujuTransform_2_TransformOut";

				another_dataset_tShujuTransform_2_TransformOut = (com.github.romualdrousseau.shuju.DataSet) globalMap
						.get("dataset_row3");
				dataset_tShujuTransform_2_TransformOut.transform(
						new com.github.romualdrousseau.shuju.transforms.VectorAdd(
								another_dataset_tShujuTransform_2_TransformOut, -1.0),
						com.github.romualdrousseau.shuju.IFeature.LABEL);
				dataset_tShujuTransform_2_TransformOut
						.transform(new com.github.romualdrousseau.shuju.transforms.VectorShift(12.0), 0);

				globalMap.put("tShujuTransform_2", dataset_tShujuTransform_2_TransformOut);
				globalMap.put("tShujuTransform_2_TransformOut_NB_LINE", nb_line_tShujuTransform_2_TransformOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tShujuTransform_2_TransformOut", true);
				end_Hash.put("tShujuTransform_2_TransformOut", System.currentTimeMillis());

				/**
				 * [tShujuTransform_2_TransformOut end ] stop
				 */

				/**
				 * [tShujuTransform_3_TransformOut begin ] start
				 */

				ok_Hash.put("tShujuTransform_3_TransformOut", false);
				start_Hash.put("tShujuTransform_3_TransformOut", System.currentTimeMillis());

				currentVirtualComponent = "tShujuTransform_3";

				currentComponent = "tShujuTransform_3_TransformOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tShujuTransform_3_TransformOut = 0;

				int nb_line_tShujuTransform_3_TransformOut = 0;

				com.github.romualdrousseau.shuju.DataSet dataset_tShujuTransform_3_TransformOut = new com.github.romualdrousseau.shuju.DataSet();

				com.github.romualdrousseau.shuju.DataSet another_dataset_tShujuTransform_3_TransformOut = null;

				/**
				 * [tShujuTransform_3_TransformOut begin ] stop
				 */

				/**
				 * [tShujuTransform_2_TransformIn begin ] start
				 */

				ok_Hash.put("tShujuTransform_2_TransformIn", false);
				start_Hash.put("tShujuTransform_2_TransformIn", System.currentTimeMillis());

				currentVirtualComponent = "tShujuTransform_2";

				currentComponent = "tShujuTransform_2_TransformIn";

				int tos_count_tShujuTransform_2_TransformIn = 0;

				int nb_line_tShujuTransform_2_TransformIn = 0;

				com.github.romualdrousseau.shuju.DataSet dataset_tShujuTransform_2_TransformIn = (com.github.romualdrousseau.shuju.DataSet) globalMap
						.get("tShujuTransform_2");
				for (com.github.romualdrousseau.shuju.DataRow row_tShujuTransform_2_TransformIn : dataset_tShujuTransform_2_TransformIn
						.rows()) {
					row9.T = (Double) row_tShujuTransform_2_TransformIn.features().get(0).getValue();
					row9.D = (Double) row_tShujuTransform_2_TransformIn.getLabel().getValue();
					nb_line_tShujuTransform_2_TransformIn++;

					/**
					 * [tShujuTransform_2_TransformIn begin ] stop
					 */

					/**
					 * [tShujuTransform_2_TransformIn main ] start
					 */

					currentVirtualComponent = "tShujuTransform_2";

					currentComponent = "tShujuTransform_2_TransformIn";

					tos_count_tShujuTransform_2_TransformIn++;

					/**
					 * [tShujuTransform_2_TransformIn main ] stop
					 */

					/**
					 * [tShujuTransform_2_TransformIn process_data_begin ] start
					 */

					currentVirtualComponent = "tShujuTransform_2";

					currentComponent = "tShujuTransform_2_TransformIn";

					/**
					 * [tShujuTransform_2_TransformIn process_data_begin ] stop
					 */

					/**
					 * [tShujuTransform_3_TransformOut main ] start
					 */

					currentVirtualComponent = "tShujuTransform_3";

					currentComponent = "tShujuTransform_3_TransformOut";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
					}

					com.github.romualdrousseau.shuju.DataRow row_tShujuTransform_3_TransformOut = new com.github.romualdrousseau.shuju.DataRow();
					com.github.romualdrousseau.shuju.features.NumericFeature feature_T_tShujuTransform_3_TransformOut = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row9.T);
					row_tShujuTransform_3_TransformOut.addFeature(feature_T_tShujuTransform_3_TransformOut);
					com.github.romualdrousseau.shuju.features.NumericFeature feature_D_tShujuTransform_3_TransformOut = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row9.D);
					row_tShujuTransform_3_TransformOut.setLabel(feature_D_tShujuTransform_3_TransformOut);
					dataset_tShujuTransform_3_TransformOut.addRow(row_tShujuTransform_3_TransformOut);

					nb_line_tShujuTransform_3_TransformOut++;

					tos_count_tShujuTransform_3_TransformOut++;

					/**
					 * [tShujuTransform_3_TransformOut main ] stop
					 */

					/**
					 * [tShujuTransform_3_TransformOut process_data_begin ] start
					 */

					currentVirtualComponent = "tShujuTransform_3";

					currentComponent = "tShujuTransform_3_TransformOut";

					/**
					 * [tShujuTransform_3_TransformOut process_data_begin ] stop
					 */

					/**
					 * [tShujuTransform_3_TransformOut process_data_end ] start
					 */

					currentVirtualComponent = "tShujuTransform_3";

					currentComponent = "tShujuTransform_3_TransformOut";

					/**
					 * [tShujuTransform_3_TransformOut process_data_end ] stop
					 */

					/**
					 * [tShujuTransform_2_TransformIn process_data_end ] start
					 */

					currentVirtualComponent = "tShujuTransform_2";

					currentComponent = "tShujuTransform_2_TransformIn";

					/**
					 * [tShujuTransform_2_TransformIn process_data_end ] stop
					 */

					/**
					 * [tShujuTransform_2_TransformIn end ] start
					 */

					currentVirtualComponent = "tShujuTransform_2";

					currentComponent = "tShujuTransform_2_TransformIn";

				}

				globalMap.put("tShujuTransform_2_TransformIn_NB_LINE", nb_line_tShujuTransform_2_TransformIn);

				ok_Hash.put("tShujuTransform_2_TransformIn", true);
				end_Hash.put("tShujuTransform_2_TransformIn", System.currentTimeMillis());

				/**
				 * [tShujuTransform_2_TransformIn end ] stop
				 */

				/**
				 * [tShujuTransform_3_TransformOut end ] start
				 */

				currentVirtualComponent = "tShujuTransform_3";

				currentComponent = "tShujuTransform_3_TransformOut";

				another_dataset_tShujuTransform_3_TransformOut = (com.github.romualdrousseau.shuju.DataSet) globalMap
						.get("dataset_row7");
				dataset_tShujuTransform_3_TransformOut.transform(
						new com.github.romualdrousseau.shuju.transforms.SmoothScaler(0.8),
						com.github.romualdrousseau.shuju.IFeature.LABEL);
				dataset_tShujuTransform_3_TransformOut.transform(
						new com.github.romualdrousseau.shuju.transforms.VectorAdd(
								another_dataset_tShujuTransform_3_TransformOut, 1.0),
						com.github.romualdrousseau.shuju.IFeature.LABEL);

				globalMap.put("tShujuTransform_3", dataset_tShujuTransform_3_TransformOut);
				globalMap.put("tShujuTransform_3_TransformOut_NB_LINE", nb_line_tShujuTransform_3_TransformOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tShujuTransform_3_TransformOut", true);
				end_Hash.put("tShujuTransform_3_TransformOut", System.currentTimeMillis());

				/**
				 * [tShujuTransform_3_TransformOut end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = "C:/Users/RRU_SG1/Documents/out.xls";
				int nb_line_tFileOutputExcel_1 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_1.setSheet("Sheet1");
				xlsxTool_tFileOutputExcel_1.setAppend(true, true);
				xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_1.setXY(false, 0, 0, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_1) {

					xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);

				}

				xlsxTool_tFileOutputExcel_1.setFont("");

				if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_1.addRow();

					xlsxTool_tFileOutputExcel_1.addCellValue("T");

					xlsxTool_tFileOutputExcel_1.addCellValue("D");

					nb_line_tFileOutputExcel_1++;

				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFlowMeter_21 begin ] start
				 */

				ok_Hash.put("tFlowMeter_21", false);
				start_Hash.put("tFlowMeter_21", System.currentTimeMillis());

				currentComponent = "tFlowMeter_21";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tFlowMeter_21 = 0;

				int count_tFlowMeter_21 = 0;

				/**
				 * [tFlowMeter_21 begin ] stop
				 */

				/**
				 * [tShujuTransform_3_TransformIn begin ] start
				 */

				ok_Hash.put("tShujuTransform_3_TransformIn", false);
				start_Hash.put("tShujuTransform_3_TransformIn", System.currentTimeMillis());

				currentVirtualComponent = "tShujuTransform_3";

				currentComponent = "tShujuTransform_3_TransformIn";

				int tos_count_tShujuTransform_3_TransformIn = 0;

				int nb_line_tShujuTransform_3_TransformIn = 0;

				com.github.romualdrousseau.shuju.DataSet dataset_tShujuTransform_3_TransformIn = (com.github.romualdrousseau.shuju.DataSet) globalMap
						.get("tShujuTransform_3");
				for (com.github.romualdrousseau.shuju.DataRow row_tShujuTransform_3_TransformIn : dataset_tShujuTransform_3_TransformIn
						.rows()) {
					row11.T = (Double) row_tShujuTransform_3_TransformIn.features().get(0).getValue();
					row11.D = (Double) row_tShujuTransform_3_TransformIn.getLabel().getValue();
					nb_line_tShujuTransform_3_TransformIn++;

					/**
					 * [tShujuTransform_3_TransformIn begin ] stop
					 */

					/**
					 * [tShujuTransform_3_TransformIn main ] start
					 */

					currentVirtualComponent = "tShujuTransform_3";

					currentComponent = "tShujuTransform_3_TransformIn";

					tos_count_tShujuTransform_3_TransformIn++;

					/**
					 * [tShujuTransform_3_TransformIn main ] stop
					 */

					/**
					 * [tShujuTransform_3_TransformIn process_data_begin ] start
					 */

					currentVirtualComponent = "tShujuTransform_3";

					currentComponent = "tShujuTransform_3_TransformIn";

					/**
					 * [tShujuTransform_3_TransformIn process_data_begin ] stop
					 */

					/**
					 * [tFlowMeter_21 main ] start
					 */

					currentComponent = "tFlowMeter_21";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
					}

					count_tFlowMeter_21++;

					row10 = row11;

					tos_count_tFlowMeter_21++;

					/**
					 * [tFlowMeter_21 main ] stop
					 */

					/**
					 * [tFlowMeter_21 process_data_begin ] start
					 */

					currentComponent = "tFlowMeter_21";

					/**
					 * [tFlowMeter_21 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 main ] start
					 */

					currentComponent = "tLogRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
					}

///////////////////////		

					strBuffer_tLogRow_2 = new StringBuilder();

					strBuffer_tLogRow_2.append(FormatterUtils.formatUnwithE(row10.T));

					strBuffer_tLogRow_2.append("|");

					strBuffer_tLogRow_2.append(FormatterUtils.formatUnwithE(row10.D));

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
					}
					consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
					consoleOut_tLogRow_2.flush();
					nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

					row12 = row10;

					tos_count_tLogRow_2++;

					/**
					 * [tLogRow_2 main ] stop
					 */

					/**
					 * [tLogRow_2 process_data_begin ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_1 main ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
					}

					xlsxTool_tFileOutputExcel_1.addRow();

					xlsxTool_tFileOutputExcel_1.addCellValue(row12.T);

					xlsxTool_tFileOutputExcel_1.addCellValue(row12.D);
					nb_line_tFileOutputExcel_1++;

					tos_count_tFileOutputExcel_1++;

					/**
					 * [tFileOutputExcel_1 main ] stop
					 */

					/**
					 * [tFileOutputExcel_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					/**
					 * [tFileOutputExcel_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputExcel_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputExcel_1";

					/**
					 * [tFileOutputExcel_1 process_data_end ] stop
					 */

					/**
					 * [tLogRow_2 process_data_end ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_end ] stop
					 */

					/**
					 * [tFlowMeter_21 process_data_end ] start
					 */

					currentComponent = "tFlowMeter_21";

					/**
					 * [tFlowMeter_21 process_data_end ] stop
					 */

					/**
					 * [tShujuTransform_3_TransformIn process_data_end ] start
					 */

					currentVirtualComponent = "tShujuTransform_3";

					currentComponent = "tShujuTransform_3_TransformIn";

					/**
					 * [tShujuTransform_3_TransformIn process_data_end ] stop
					 */

					/**
					 * [tShujuTransform_3_TransformIn end ] start
					 */

					currentVirtualComponent = "tShujuTransform_3";

					currentComponent = "tShujuTransform_3_TransformIn";

				}

				globalMap.put("tShujuTransform_3_TransformIn_NB_LINE", nb_line_tShujuTransform_3_TransformIn);

				ok_Hash.put("tShujuTransform_3_TransformIn", true);
				end_Hash.put("tShujuTransform_3_TransformIn", System.currentTimeMillis());

				/**
				 * [tShujuTransform_3_TransformIn end ] stop
				 */

				/**
				 * [tFlowMeter_21 end ] start
				 */

				currentComponent = "tFlowMeter_21";

				tFlowMeterCatcher_1.addMessage("row11", new Integer(count_tFlowMeter_21), "null", "", "tFlowMeter_21");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tFlowMeter_21", true);
				end_Hash.put("tFlowMeter_21", System.currentTimeMillis());

				/**
				 * [tFlowMeter_21 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				columnIndex_tFileOutputExcel_1 = 0;

				xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);

				columnIndex_tFileOutputExcel_1 = 1;

				xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);

				xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1, true);

				nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 - 1;

				globalMap.put("tFileOutputExcel_1_NB_LINE", nb_line_tFileOutputExcel_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

			} // end the resume

			tFlowMeterCatcher_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tChronometerStop_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tShujuTransform_3_TransformIn"
			globalMap.remove("tShujuTransform_3");

			// free memory for "tShujuTransform_2_TransformIn"
			globalMap.remove("tShujuTransform_2");

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFlowMeter_19 finally ] start
				 */

				currentComponent = "tFlowMeter_19";

				/**
				 * [tFlowMeter_19 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_2 finally ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				/**
				 * [tFileOutputExcel_2 finally ] stop
				 */

				/**
				 * [tShujuTransform_2_TransformOut finally ] start
				 */

				currentVirtualComponent = "tShujuTransform_2";

				currentComponent = "tShujuTransform_2_TransformOut";

				/**
				 * [tShujuTransform_2_TransformOut finally ] stop
				 */

				/**
				 * [tShujuTransform_2_TransformIn finally ] start
				 */

				currentVirtualComponent = "tShujuTransform_2";

				currentComponent = "tShujuTransform_2_TransformIn";

				/**
				 * [tShujuTransform_2_TransformIn finally ] stop
				 */

				/**
				 * [tShujuTransform_3_TransformOut finally ] start
				 */

				currentVirtualComponent = "tShujuTransform_3";

				currentComponent = "tShujuTransform_3_TransformOut";

				/**
				 * [tShujuTransform_3_TransformOut finally ] stop
				 */

				/**
				 * [tShujuTransform_3_TransformIn finally ] start
				 */

				currentVirtualComponent = "tShujuTransform_3";

				currentComponent = "tShujuTransform_3_TransformIn";

				/**
				 * [tShujuTransform_3_TransformIn finally ] stop
				 */

				/**
				 * [tFlowMeter_21 finally ] start
				 */

				currentComponent = "tFlowMeter_21";

				/**
				 * [tFlowMeter_21 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_SimpleLinearRegressionSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_SimpleLinearRegressionSample.length == 0) {
						commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_SimpleLinearRegressionSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_SimpleLinearRegressionSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFlowMeterCatcher_1 begin ] start
				 */

				ok_Hash.put("tFlowMeterCatcher_1", false);
				start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				currentComponent = "tFlowMeterCatcher_1";

				int tos_count_tFlowMeterCatcher_1 = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
					row13.pid = pid;
					row13.root_pid = rootPid;
					row13.father_pid = fatherPid;
					row13.project = projectName;
					row13.job = jobName;
					row13.context = contextStr;
					row13.origin = (mcm.getOrigin() == null || mcm.getOrigin().length() < 1 ? null : mcm.getOrigin());
					row13.moment = mcm.getMoment();
					row13.job_version = mcm.getJobVersion();
					row13.job_repository_id = mcm.getJobId();
					row13.system_pid = mcm.getSystemPid();
					row13.label = mcm.getLabel();
					row13.count = mcm.getCount();
					row13.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense() + "_count");
					row13.thresholds = mcm.getThresholds();

					/**
					 * [tFlowMeterCatcher_1 begin ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 main ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					tos_count_tFlowMeterCatcher_1++;

					/**
					 * [tFlowMeterCatcher_1 main ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
					}

///////////////////////		

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row13.moment != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.format_Date(row13.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.pid != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.father_pid != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.father_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.root_pid != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.root_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.system_pid != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.system_pid));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.project != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.project));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.job != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.job));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.job_repository_id != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.job_repository_id));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.job_version != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.job_version));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.context != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.context));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.origin != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.origin));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.label != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.label));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.count != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.count));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.reference != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.reference));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row13.thresholds != null) { //

						strBuffer_tLogRow_1.append(String.valueOf(row13.thresholds));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
					}
					consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
					consoleOut_tLogRow_1.flush();
					nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

				}

				ok_Hash.put("tFlowMeterCatcher_1", true);
				end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				/**
				 * [tFlowMeterCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFlowMeterCatcher_1 finally ] start
				 */

				currentComponent = "tFlowMeterCatcher_1";

				/**
				 * [tFlowMeterCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public Double T;

		public Double getT() {
			return this.T;
		}

		public Double RESULT_LABEL;

		public Double getRESULT_LABEL() {
			return this.RESULT_LABEL;
		}

		public Double RESULT_ERROR;

		public Double getRESULT_ERROR() {
			return this.RESULT_ERROR;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.T = null;
					} else {
						this.T = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.RESULT_LABEL = null;
					} else {
						this.RESULT_LABEL = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.RESULT_ERROR = null;
					} else {
						this.RESULT_ERROR = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.T == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.T);
				}

				// Double

				if (this.RESULT_LABEL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.RESULT_LABEL);
				}

				// Double

				if (this.RESULT_ERROR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.RESULT_ERROR);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",RESULT_LABEL=" + String.valueOf(RESULT_LABEL));
			sb.append(",RESULT_ERROR=" + String.valueOf(RESULT_ERROR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public Double T;

		public Double getT() {
			return this.T;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.T = null;
					} else {
						this.T = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.T == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.T);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tShujuTransformDataSet_row3 begin ] start
				 */

				ok_Hash.put("tShujuTransformDataSet_row3", false);
				start_Hash.put("tShujuTransformDataSet_row3", System.currentTimeMillis());

				currentComponent = "tShujuTransformDataSet_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tShujuTransformDataSet_row3 = 0;

				int nb_line_tShujuTransformDataSet_row3 = 0;

				com.github.romualdrousseau.shuju.DataSet dataset_tShujuTransformDataSet_row3 = new com.github.romualdrousseau.shuju.DataSet();

				/**
				 * [tShujuTransformDataSet_row3 begin ] stop
				 */

				/**
				 * [tShujuPredict_1 begin ] start
				 */

				ok_Hash.put("tShujuPredict_1", false);
				start_Hash.put("tShujuPredict_1", System.currentTimeMillis());

				currentComponent = "tShujuPredict_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tShujuPredict_1 = 0;

				int nb_line_tShujuPredict_1 = 0;

				com.github.romualdrousseau.shuju.IClassifier classifier_tShujuPredict_1 = (com.github.romualdrousseau.shuju.IClassifier) globalMap
						.get("classifier_tShujuTrain_1");

				/**
				 * [tShujuPredict_1 begin ] stop
				 */

				/**
				 * [tRowGenerator_1 begin ] start
				 */

				ok_Hash.put("tRowGenerator_1", false);
				start_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				currentComponent = "tRowGenerator_1";

				int tos_count_tRowGenerator_1 = 0;

				int nb_line_tRowGenerator_1 = 0;
				int nb_max_row_tRowGenerator_1 = 12;

				class tRowGenerator_1Randomizer {
					public Double getRandomT() {

						return Mathematical.ABS(Numeric.sequence("s1", 0, 1));

					}
				}
				tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

				for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
					row5.T = randtRowGenerator_1.getRandomT();
					nb_line_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 begin ] stop
					 */

					/**
					 * [tRowGenerator_1 main ] start
					 */

					currentComponent = "tRowGenerator_1";

					tos_count_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 main ] stop
					 */

					/**
					 * [tRowGenerator_1 process_data_begin ] start
					 */

					currentComponent = "tRowGenerator_1";

					/**
					 * [tRowGenerator_1 process_data_begin ] stop
					 */

					/**
					 * [tShujuPredict_1 main ] start
					 */

					currentComponent = "tShujuPredict_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
					}

					com.github.romualdrousseau.shuju.DataRow row_tShujuPredict_1 = new com.github.romualdrousseau.shuju.DataRow();
					com.github.romualdrousseau.shuju.features.NumericFeature feature_T_tShujuPredict_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row5.T);
					row_tShujuPredict_1.addFeature(feature_T_tShujuPredict_1);
					row3.T = row5.T;
					com.github.romualdrousseau.shuju.Result result = classifier_tShujuPredict_1
							.predict(row_tShujuPredict_1);
					row3.RESULT_LABEL = (Double) result.getLabel().getValue();
					row3.RESULT_ERROR = result.getError();

					nb_line_tShujuPredict_1++;

					tos_count_tShujuPredict_1++;

					/**
					 * [tShujuPredict_1 main ] stop
					 */

					/**
					 * [tShujuPredict_1 process_data_begin ] start
					 */

					currentComponent = "tShujuPredict_1";

					/**
					 * [tShujuPredict_1 process_data_begin ] stop
					 */

					/**
					 * [tShujuTransformDataSet_row3 main ] start
					 */

					currentComponent = "tShujuTransformDataSet_row3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
					}

					com.github.romualdrousseau.shuju.DataRow row_tShujuTransformDataSet_row3 = new com.github.romualdrousseau.shuju.DataRow();
					com.github.romualdrousseau.shuju.features.NumericFeature feature_T_tShujuTransformDataSet_row3 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row3.T);
					row_tShujuTransformDataSet_row3.addFeature(feature_T_tShujuTransformDataSet_row3);
					com.github.romualdrousseau.shuju.features.NumericFeature feature_RESULT_LABEL_tShujuTransformDataSet_row3 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row3.RESULT_LABEL);
					row_tShujuTransformDataSet_row3.setLabel(feature_RESULT_LABEL_tShujuTransformDataSet_row3);
					com.github.romualdrousseau.shuju.features.NumericFeature feature_RESULT_ERROR_tShujuTransformDataSet_row3 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row3.RESULT_ERROR);
					row_tShujuTransformDataSet_row3.addFeature(feature_RESULT_ERROR_tShujuTransformDataSet_row3);
					dataset_tShujuTransformDataSet_row3.addRow(row_tShujuTransformDataSet_row3);

					nb_line_tShujuTransformDataSet_row3++;

					tos_count_tShujuTransformDataSet_row3++;

					/**
					 * [tShujuTransformDataSet_row3 main ] stop
					 */

					/**
					 * [tShujuTransformDataSet_row3 process_data_begin ] start
					 */

					currentComponent = "tShujuTransformDataSet_row3";

					/**
					 * [tShujuTransformDataSet_row3 process_data_begin ] stop
					 */

					/**
					 * [tShujuTransformDataSet_row3 process_data_end ] start
					 */

					currentComponent = "tShujuTransformDataSet_row3";

					/**
					 * [tShujuTransformDataSet_row3 process_data_end ] stop
					 */

					/**
					 * [tShujuPredict_1 process_data_end ] start
					 */

					currentComponent = "tShujuPredict_1";

					/**
					 * [tShujuPredict_1 process_data_end ] stop
					 */

					/**
					 * [tRowGenerator_1 process_data_end ] start
					 */

					currentComponent = "tRowGenerator_1";

					/**
					 * [tRowGenerator_1 process_data_end ] stop
					 */

					/**
					 * [tRowGenerator_1 end ] start
					 */

					currentComponent = "tRowGenerator_1";

				}
				globalMap.put("tRowGenerator_1_NB_LINE", nb_line_tRowGenerator_1);

				ok_Hash.put("tRowGenerator_1", true);
				end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				/**
				 * [tRowGenerator_1 end ] stop
				 */

				/**
				 * [tShujuPredict_1 end ] start
				 */

				currentComponent = "tShujuPredict_1";

				globalMap.put("tShujuPredict_1_NB_LINE", nb_line_tShujuPredict_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tShujuPredict_1", true);
				end_Hash.put("tShujuPredict_1", System.currentTimeMillis());

				/**
				 * [tShujuPredict_1 end ] stop
				 */

				/**
				 * [tShujuTransformDataSet_row3 end ] start
				 */

				currentComponent = "tShujuTransformDataSet_row3";

				globalMap.put("dataset_row3", dataset_tShujuTransformDataSet_row3);
				globalMap.put("tShujuTransformDataSet_row3_NB_LINE", nb_line_tShujuTransformDataSet_row3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tShujuTransformDataSet_row3", true);
				end_Hash.put("tShujuTransformDataSet_row3", System.currentTimeMillis());

				/**
				 * [tShujuTransformDataSet_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRowGenerator_1 finally ] start
				 */

				currentComponent = "tRowGenerator_1";

				/**
				 * [tRowGenerator_1 finally ] stop
				 */

				/**
				 * [tShujuPredict_1 finally ] start
				 */

				currentComponent = "tShujuPredict_1";

				/**
				 * [tShujuPredict_1 finally ] stop
				 */

				/**
				 * [tShujuTransformDataSet_row3 finally ] start
				 */

				currentComponent = "tShujuTransformDataSet_row3";

				/**
				 * [tShujuTransformDataSet_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public Double T;

		public Double getT() {
			return this.T;
		}

		public Double RESULT_LABEL;

		public Double getRESULT_LABEL() {
			return this.RESULT_LABEL;
		}

		public Double RESULT_ERROR;

		public Double getRESULT_ERROR() {
			return this.RESULT_ERROR;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.T = null;
					} else {
						this.T = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.RESULT_LABEL = null;
					} else {
						this.RESULT_LABEL = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.RESULT_ERROR = null;
					} else {
						this.RESULT_ERROR = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.T == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.T);
				}

				// Double

				if (this.RESULT_LABEL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.RESULT_LABEL);
				}

				// Double

				if (this.RESULT_ERROR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.RESULT_ERROR);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append(",RESULT_LABEL=" + String.valueOf(RESULT_LABEL));
			sb.append(",RESULT_ERROR=" + String.valueOf(RESULT_ERROR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_SimpleLinearRegressionSample = new byte[0];

		public Double T;

		public Double getT() {
			return this.T;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_SimpleLinearRegressionSample) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.T = null;
					} else {
						this.T = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.T == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.T);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("T=" + String.valueOf(T));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tShujuTransformDataSet_row7 begin ] start
				 */

				ok_Hash.put("tShujuTransformDataSet_row7", false);
				start_Hash.put("tShujuTransformDataSet_row7", System.currentTimeMillis());

				currentComponent = "tShujuTransformDataSet_row7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tShujuTransformDataSet_row7 = 0;

				int nb_line_tShujuTransformDataSet_row7 = 0;

				com.github.romualdrousseau.shuju.DataSet dataset_tShujuTransformDataSet_row7 = new com.github.romualdrousseau.shuju.DataSet();

				/**
				 * [tShujuTransformDataSet_row7 begin ] stop
				 */

				/**
				 * [tShujuPredict_2 begin ] start
				 */

				ok_Hash.put("tShujuPredict_2", false);
				start_Hash.put("tShujuPredict_2", System.currentTimeMillis());

				currentComponent = "tShujuPredict_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tShujuPredict_2 = 0;

				int nb_line_tShujuPredict_2 = 0;

				com.github.romualdrousseau.shuju.IClassifier classifier_tShujuPredict_2 = (com.github.romualdrousseau.shuju.IClassifier) globalMap
						.get("classifier_tShujuTrain_1");

				/**
				 * [tShujuPredict_2 begin ] stop
				 */

				/**
				 * [tRowGenerator_2 begin ] start
				 */

				ok_Hash.put("tRowGenerator_2", false);
				start_Hash.put("tRowGenerator_2", System.currentTimeMillis());

				currentComponent = "tRowGenerator_2";

				int tos_count_tRowGenerator_2 = 0;

				int nb_line_tRowGenerator_2 = 0;
				int nb_max_row_tRowGenerator_2 = 12;

				class tRowGenerator_2Randomizer {
					public Double getRandomT() {

						return Mathematical.ABS(Numeric.sequence("s2", 12, 1));

					}
				}
				tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();

				for (int itRowGenerator_2 = 0; itRowGenerator_2 < nb_max_row_tRowGenerator_2; itRowGenerator_2++) {
					row4.T = randtRowGenerator_2.getRandomT();
					nb_line_tRowGenerator_2++;

					/**
					 * [tRowGenerator_2 begin ] stop
					 */

					/**
					 * [tRowGenerator_2 main ] start
					 */

					currentComponent = "tRowGenerator_2";

					tos_count_tRowGenerator_2++;

					/**
					 * [tRowGenerator_2 main ] stop
					 */

					/**
					 * [tRowGenerator_2 process_data_begin ] start
					 */

					currentComponent = "tRowGenerator_2";

					/**
					 * [tRowGenerator_2 process_data_begin ] stop
					 */

					/**
					 * [tShujuPredict_2 main ] start
					 */

					currentComponent = "tShujuPredict_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
					}

					com.github.romualdrousseau.shuju.DataRow row_tShujuPredict_2 = new com.github.romualdrousseau.shuju.DataRow();
					com.github.romualdrousseau.shuju.features.NumericFeature feature_T_tShujuPredict_2 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row4.T);
					row_tShujuPredict_2.addFeature(feature_T_tShujuPredict_2);
					row7.T = row4.T;
					com.github.romualdrousseau.shuju.Result result = classifier_tShujuPredict_2
							.predict(row_tShujuPredict_2);
					row7.RESULT_LABEL = (Double) result.getLabel().getValue();
					row7.RESULT_ERROR = result.getError();

					nb_line_tShujuPredict_2++;

					tos_count_tShujuPredict_2++;

					/**
					 * [tShujuPredict_2 main ] stop
					 */

					/**
					 * [tShujuPredict_2 process_data_begin ] start
					 */

					currentComponent = "tShujuPredict_2";

					/**
					 * [tShujuPredict_2 process_data_begin ] stop
					 */

					/**
					 * [tShujuTransformDataSet_row7 main ] start
					 */

					currentComponent = "tShujuTransformDataSet_row7";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
					}

					com.github.romualdrousseau.shuju.DataRow row_tShujuTransformDataSet_row7 = new com.github.romualdrousseau.shuju.DataRow();
					com.github.romualdrousseau.shuju.features.NumericFeature feature_T_tShujuTransformDataSet_row7 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row7.T);
					row_tShujuTransformDataSet_row7.addFeature(feature_T_tShujuTransformDataSet_row7);
					com.github.romualdrousseau.shuju.features.NumericFeature feature_RESULT_LABEL_tShujuTransformDataSet_row7 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row7.RESULT_LABEL);
					row_tShujuTransformDataSet_row7.setLabel(feature_RESULT_LABEL_tShujuTransformDataSet_row7);
					com.github.romualdrousseau.shuju.features.NumericFeature feature_RESULT_ERROR_tShujuTransformDataSet_row7 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row7.RESULT_ERROR);
					row_tShujuTransformDataSet_row7.addFeature(feature_RESULT_ERROR_tShujuTransformDataSet_row7);
					dataset_tShujuTransformDataSet_row7.addRow(row_tShujuTransformDataSet_row7);

					nb_line_tShujuTransformDataSet_row7++;

					tos_count_tShujuTransformDataSet_row7++;

					/**
					 * [tShujuTransformDataSet_row7 main ] stop
					 */

					/**
					 * [tShujuTransformDataSet_row7 process_data_begin ] start
					 */

					currentComponent = "tShujuTransformDataSet_row7";

					/**
					 * [tShujuTransformDataSet_row7 process_data_begin ] stop
					 */

					/**
					 * [tShujuTransformDataSet_row7 process_data_end ] start
					 */

					currentComponent = "tShujuTransformDataSet_row7";

					/**
					 * [tShujuTransformDataSet_row7 process_data_end ] stop
					 */

					/**
					 * [tShujuPredict_2 process_data_end ] start
					 */

					currentComponent = "tShujuPredict_2";

					/**
					 * [tShujuPredict_2 process_data_end ] stop
					 */

					/**
					 * [tRowGenerator_2 process_data_end ] start
					 */

					currentComponent = "tRowGenerator_2";

					/**
					 * [tRowGenerator_2 process_data_end ] stop
					 */

					/**
					 * [tRowGenerator_2 end ] start
					 */

					currentComponent = "tRowGenerator_2";

				}
				globalMap.put("tRowGenerator_2_NB_LINE", nb_line_tRowGenerator_2);

				ok_Hash.put("tRowGenerator_2", true);
				end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

				/**
				 * [tRowGenerator_2 end ] stop
				 */

				/**
				 * [tShujuPredict_2 end ] start
				 */

				currentComponent = "tShujuPredict_2";

				globalMap.put("tShujuPredict_2_NB_LINE", nb_line_tShujuPredict_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tShujuPredict_2", true);
				end_Hash.put("tShujuPredict_2", System.currentTimeMillis());

				/**
				 * [tShujuPredict_2 end ] stop
				 */

				/**
				 * [tShujuTransformDataSet_row7 end ] start
				 */

				currentComponent = "tShujuTransformDataSet_row7";

				globalMap.put("dataset_row7", dataset_tShujuTransformDataSet_row7);
				globalMap.put("tShujuTransformDataSet_row7_NB_LINE", nb_line_tShujuTransformDataSet_row7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tShujuTransformDataSet_row7", true);
				end_Hash.put("tShujuTransformDataSet_row7", System.currentTimeMillis());

				/**
				 * [tShujuTransformDataSet_row7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRowGenerator_2 finally ] start
				 */

				currentComponent = "tRowGenerator_2";

				/**
				 * [tRowGenerator_2 finally ] stop
				 */

				/**
				 * [tShujuPredict_2 finally ] start
				 */

				currentComponent = "tShujuPredict_2";

				/**
				 * [tShujuPredict_2 finally ] stop
				 */

				/**
				 * [tShujuTransformDataSet_row7 finally ] start
				 */

				currentComponent = "tShujuTransformDataSet_row7";

				/**
				 * [tShujuTransformDataSet_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final SimpleLinearRegressionSample SimpleLinearRegressionSampleClass = new SimpleLinearRegressionSample();

		int exitCode = SimpleLinearRegressionSampleClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = SimpleLinearRegressionSample.class.getClassLoader().getResourceAsStream(
					"samples/simplelinearregressionsample_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = SimpleLinearRegressionSample.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tFileInputDelimited_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get()).get("status"))) {
						((java.util.Map) threadLocal.get()).put("status", "end");
					}
				} catch (TalendException e_tFileInputDelimited_1) {
					globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

					e_tFileInputDelimited_1.printStackTrace();

				} catch (java.lang.Error e_tFileInputDelimited_1) {
					globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get()).put("status", "failure");
					throw e_tFileInputDelimited_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : SimpleLinearRegressionSample");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 185479 characters generated by Talend Open Studio for Big Data on the 21
 * July, 2020 4:58:31 PM SGT
 ************************************************************************************************/