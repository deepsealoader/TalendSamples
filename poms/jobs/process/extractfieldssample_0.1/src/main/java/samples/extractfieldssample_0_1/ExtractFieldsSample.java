// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package samples.extractfieldssample_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: ExtractFieldsSample Purpose: Demonstrate the usage of tExtractFields<br>
 * Description: Demonstrate the usage of tExtractFields on MongoDB <br>
 * @author 
 * @version 7.0.1.20180411_1414
 * @status DEV
 */
public class ExtractFieldsSample implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ExtractFieldsSample";
	private final String projectName = "SAMPLES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils(
			"_psQyAK6mEei-0OOsSSYPJA", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ExtractFieldsSample.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ExtractFieldsSample.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFlowMeterCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractFields_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tConvertType_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMongoDBClose_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tMongoDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeterCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMongoDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_ExtractFieldsSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_ExtractFieldsSample = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_ExtractFieldsSample.length) {
					if (length < 1024
							&& commonByteArray_SAMPLES_ExtractFieldsSample.length == 0) {
						commonByteArray_SAMPLES_ExtractFieldsSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_ExtractFieldsSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_ExtractFieldsSample, 0,
						length);
				strReturn = new String(
						commonByteArray_SAMPLES_ExtractFieldsSample, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_ExtractFieldsSample) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFlowMeterCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row13" + iterateId, 0,
								0);

					}
				}

				int tos_count_tLogRow_2 = 0;

				class BytesLimit65535_tLogRow_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_2().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFlowMeterCatcher_1 begin ] start
				 */

				ok_Hash.put("tFlowMeterCatcher_1", false);
				start_Hash.put("tFlowMeterCatcher_1",
						System.currentTimeMillis());

				currentComponent = "tFlowMeterCatcher_1";

				int tos_count_tFlowMeterCatcher_1 = 0;

				class BytesLimit65535_tFlowMeterCatcher_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowMeterCatcher_1().limitLog4jByte();

				for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1
						.getMessages()) {
					row13.pid = pid;
					row13.root_pid = rootPid;
					row13.father_pid = fatherPid;
					row13.project = projectName;
					row13.job = jobName;
					row13.context = contextStr;
					row13.origin = (mcm.getOrigin() == null
							|| mcm.getOrigin().length() < 1 ? null : mcm
							.getOrigin());
					row13.moment = mcm.getMoment();
					row13.job_version = mcm.getJobVersion();
					row13.job_repository_id = mcm.getJobId();
					row13.system_pid = mcm.getSystemPid();
					row13.label = mcm.getLabel();
					row13.count = mcm.getCount();
					row13.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm
							.getReferense() + "_count");
					row13.thresholds = mcm.getThresholds();

					/**
					 * [tFlowMeterCatcher_1 begin ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 main ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					tos_count_tFlowMeterCatcher_1++;

					/**
					 * [tFlowMeterCatcher_1 main ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 main ] start
					 */

					currentComponent = "tLogRow_2";

					// row13
					// row13

					if (execStat) {
						runStat.updateStatOnConnection("row13" + iterateId, 1,
								1);
					}

					// /////////////////////

					strBuffer_tLogRow_2 = new StringBuilder();

					if (row13.moment != null) { //

						strBuffer_tLogRow_2.append(FormatterUtils.format_Date(
								row13.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.pid != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.pid));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.father_pid != null) { //

						strBuffer_tLogRow_2.append(String
								.valueOf(row13.father_pid));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.root_pid != null) { //

						strBuffer_tLogRow_2.append(String
								.valueOf(row13.root_pid));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.system_pid != null) { //

						strBuffer_tLogRow_2.append(String
								.valueOf(row13.system_pid));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.project != null) { //

						strBuffer_tLogRow_2.append(String
								.valueOf(row13.project));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.job != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.job));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.job_repository_id != null) { //

						strBuffer_tLogRow_2.append(String
								.valueOf(row13.job_repository_id));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.job_version != null) { //

						strBuffer_tLogRow_2.append(String
								.valueOf(row13.job_version));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.context != null) { //

						strBuffer_tLogRow_2.append(String
								.valueOf(row13.context));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.origin != null) { //

						strBuffer_tLogRow_2
								.append(String.valueOf(row13.origin));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.label != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.label));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.count != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.count));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.reference != null) { //

						strBuffer_tLogRow_2.append(String
								.valueOf(row13.reference));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.thresholds != null) { //

						strBuffer_tLogRow_2.append(String
								.valueOf(row13.thresholds));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
								.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_2 = new java.io.PrintStream(
								new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
					}
					consoleOut_tLogRow_2
							.println(strBuffer_tLogRow_2.toString());
					consoleOut_tLogRow_2.flush();
					nb_line_tLogRow_2++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_2++;

					/**
					 * [tLogRow_2 main ] stop
					 */

					/**
					 * [tLogRow_2 process_data_begin ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 process_data_end ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

				}

				ok_Hash.put("tFlowMeterCatcher_1", true);
				end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				/**
				 * [tFlowMeterCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row13" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFlowMeterCatcher_1 finally ] start
				 */

				currentComponent = "tFlowMeterCatcher_1";

				/**
				 * [tFlowMeterCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBConnection_1 begin ] start
				 */

				ok_Hash.put("tMongoDBConnection_1", false);
				start_Hash.put("tMongoDBConnection_1",
						System.currentTimeMillis());

				currentComponent = "tMongoDBConnection_1";

				int tos_count_tMongoDBConnection_1 = 0;

				class BytesLimit65535_tMongoDBConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBConnection_1().limitLog4jByte();

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBConnection_1 = new com.mongodb.MongoClientOptions.Builder()
						.build();

				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBConnection_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBConnection_1 = new com.mongodb.ServerAddress(
						"MONGODB", 27017);
				com.mongodb.Mongo mongo_tMongoDBConnection_1 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBConnection_1,
						mongoCredentialList_tMongoDBConnection_1,
						clientOptions_tMongoDBConnection_1);

				mongo_tMongoDBConnection_1.getAddress();
				com.mongodb.client.MongoDatabase db_tMongoDBConnection_1 = ((com.mongodb.MongoClient) mongo_tMongoDBConnection_1)
						.getDatabase("DEEPSEA");

				globalMap.put("mongo_tMongoDBConnection_1",
						mongo_tMongoDBConnection_1);
				globalMap.put("db_tMongoDBConnection_1",
						db_tMongoDBConnection_1);

				/**
				 * [tMongoDBConnection_1 begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 main ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				tos_count_tMongoDBConnection_1++;

				/**
				 * [tMongoDBConnection_1 main ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBConnection_1 end ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				ok_Hash.put("tMongoDBConnection_1", true);
				end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());

				/**
				 * [tMongoDBConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tMongoDBConnection_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tMongoDBInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBConnection_1 finally ] start
				 */

				currentComponent = "tMongoDBConnection_1";

				/**
				 * [tMongoDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_ExtractFieldsSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_ExtractFieldsSample = new byte[0];

		public String NameLevel1;

		public String getNameLevel1() {
			return this.NameLevel1;
		}

		public String NameLevel2;

		public String getNameLevel2() {
			return this.NameLevel2;
		}

		public String NameLevel3;

		public String getNameLevel3() {
			return this.NameLevel3;
		}

		public String NameLevel4;

		public String getNameLevel4() {
			return this.NameLevel4;
		}

		public String NameLevel5;

		public String getNameLevel5() {
			return this.NameLevel5;
		}

		public String CodeLevel1;

		public String getCodeLevel1() {
			return this.CodeLevel1;
		}

		public String CodeLevel2;

		public String getCodeLevel2() {
			return this.CodeLevel2;
		}

		public String CodeLevel3;

		public String getCodeLevel3() {
			return this.CodeLevel3;
		}

		public String CodeLevel4;

		public String getCodeLevel4() {
			return this.CodeLevel4;
		}

		public String CodeLevel5;

		public String getCodeLevel5() {
			return this.CodeLevel5;
		}

		public Float Package;

		public Float getPackage() {
			return this.Package;
		}

		public Float StdBoxCoef;

		public Float getStdBoxCoef() {
			return this.StdBoxCoef;
		}

		public String ManufacturerName;

		public String getManufacturerName() {
			return this.ManufacturerName;
		}

		public String TherapeuticClass;

		public String getTherapeuticClass() {
			return this.TherapeuticClass;
		}

		public String Attribute1;

		public String getAttribute1() {
			return this.Attribute1;
		}

		public String Attribute2;

		public String getAttribute2() {
			return this.Attribute2;
		}

		public String Attribute3;

		public String getAttribute3() {
			return this.Attribute3;
		}

		public String Attribute4;

		public String getAttribute4() {
			return this.Attribute4;
		}

		public String Attribute5;

		public String getAttribute5() {
			return this.Attribute5;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_ExtractFieldsSample.length) {
					if (length < 1024
							&& commonByteArray_SAMPLES_ExtractFieldsSample.length == 0) {
						commonByteArray_SAMPLES_ExtractFieldsSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_ExtractFieldsSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_ExtractFieldsSample, 0,
						length);
				strReturn = new String(
						commonByteArray_SAMPLES_ExtractFieldsSample, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_ExtractFieldsSample) {

				try {

					int length = 0;

					this.NameLevel1 = readString(dis);

					this.NameLevel2 = readString(dis);

					this.NameLevel3 = readString(dis);

					this.NameLevel4 = readString(dis);

					this.NameLevel5 = readString(dis);

					this.CodeLevel1 = readString(dis);

					this.CodeLevel2 = readString(dis);

					this.CodeLevel3 = readString(dis);

					this.CodeLevel4 = readString(dis);

					this.CodeLevel5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Package = null;
					} else {
						this.Package = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.StdBoxCoef = null;
					} else {
						this.StdBoxCoef = dis.readFloat();
					}

					this.ManufacturerName = readString(dis);

					this.TherapeuticClass = readString(dis);

					this.Attribute1 = readString(dis);

					this.Attribute2 = readString(dis);

					this.Attribute3 = readString(dis);

					this.Attribute4 = readString(dis);

					this.Attribute5 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NameLevel1, dos);

				// String

				writeString(this.NameLevel2, dos);

				// String

				writeString(this.NameLevel3, dos);

				// String

				writeString(this.NameLevel4, dos);

				// String

				writeString(this.NameLevel5, dos);

				// String

				writeString(this.CodeLevel1, dos);

				// String

				writeString(this.CodeLevel2, dos);

				// String

				writeString(this.CodeLevel3, dos);

				// String

				writeString(this.CodeLevel4, dos);

				// String

				writeString(this.CodeLevel5, dos);

				// Float

				if (this.Package == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Package);
				}

				// Float

				if (this.StdBoxCoef == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.StdBoxCoef);
				}

				// String

				writeString(this.ManufacturerName, dos);

				// String

				writeString(this.TherapeuticClass, dos);

				// String

				writeString(this.Attribute1, dos);

				// String

				writeString(this.Attribute2, dos);

				// String

				writeString(this.Attribute3, dos);

				// String

				writeString(this.Attribute4, dos);

				// String

				writeString(this.Attribute5, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NameLevel1=" + NameLevel1);
			sb.append(",NameLevel2=" + NameLevel2);
			sb.append(",NameLevel3=" + NameLevel3);
			sb.append(",NameLevel4=" + NameLevel4);
			sb.append(",NameLevel5=" + NameLevel5);
			sb.append(",CodeLevel1=" + CodeLevel1);
			sb.append(",CodeLevel2=" + CodeLevel2);
			sb.append(",CodeLevel3=" + CodeLevel3);
			sb.append(",CodeLevel4=" + CodeLevel4);
			sb.append(",CodeLevel5=" + CodeLevel5);
			sb.append(",Package=" + String.valueOf(Package));
			sb.append(",StdBoxCoef=" + String.valueOf(StdBoxCoef));
			sb.append(",ManufacturerName=" + ManufacturerName);
			sb.append(",TherapeuticClass=" + TherapeuticClass);
			sb.append(",Attribute1=" + Attribute1);
			sb.append(",Attribute2=" + Attribute2);
			sb.append(",Attribute3=" + Attribute3);
			sb.append(",Attribute4=" + Attribute4);
			sb.append(",Attribute5=" + Attribute5);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_ExtractFieldsSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_ExtractFieldsSample = new byte[0];

		public String NameLevel1;

		public String getNameLevel1() {
			return this.NameLevel1;
		}

		public String NameLevel2;

		public String getNameLevel2() {
			return this.NameLevel2;
		}

		public String NameLevel3;

		public String getNameLevel3() {
			return this.NameLevel3;
		}

		public String NameLevel4;

		public String getNameLevel4() {
			return this.NameLevel4;
		}

		public String NameLevel5;

		public String getNameLevel5() {
			return this.NameLevel5;
		}

		public String CodeLevel1;

		public String getCodeLevel1() {
			return this.CodeLevel1;
		}

		public String CodeLevel2;

		public String getCodeLevel2() {
			return this.CodeLevel2;
		}

		public String CodeLevel3;

		public String getCodeLevel3() {
			return this.CodeLevel3;
		}

		public String CodeLevel4;

		public String getCodeLevel4() {
			return this.CodeLevel4;
		}

		public String CodeLevel5;

		public String getCodeLevel5() {
			return this.CodeLevel5;
		}

		public Float Package;

		public Float getPackage() {
			return this.Package;
		}

		public Float StdBoxCoef;

		public Float getStdBoxCoef() {
			return this.StdBoxCoef;
		}

		public String ManufacturerName;

		public String getManufacturerName() {
			return this.ManufacturerName;
		}

		public String TherapeuticClass;

		public String getTherapeuticClass() {
			return this.TherapeuticClass;
		}

		public String Attribute1;

		public String getAttribute1() {
			return this.Attribute1;
		}

		public String Attribute2;

		public String getAttribute2() {
			return this.Attribute2;
		}

		public String Attribute3;

		public String getAttribute3() {
			return this.Attribute3;
		}

		public String Attribute4;

		public String getAttribute4() {
			return this.Attribute4;
		}

		public String Attribute5;

		public String getAttribute5() {
			return this.Attribute5;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_ExtractFieldsSample.length) {
					if (length < 1024
							&& commonByteArray_SAMPLES_ExtractFieldsSample.length == 0) {
						commonByteArray_SAMPLES_ExtractFieldsSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_ExtractFieldsSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_ExtractFieldsSample, 0,
						length);
				strReturn = new String(
						commonByteArray_SAMPLES_ExtractFieldsSample, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_ExtractFieldsSample) {

				try {

					int length = 0;

					this.NameLevel1 = readString(dis);

					this.NameLevel2 = readString(dis);

					this.NameLevel3 = readString(dis);

					this.NameLevel4 = readString(dis);

					this.NameLevel5 = readString(dis);

					this.CodeLevel1 = readString(dis);

					this.CodeLevel2 = readString(dis);

					this.CodeLevel3 = readString(dis);

					this.CodeLevel4 = readString(dis);

					this.CodeLevel5 = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Package = null;
					} else {
						this.Package = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.StdBoxCoef = null;
					} else {
						this.StdBoxCoef = dis.readFloat();
					}

					this.ManufacturerName = readString(dis);

					this.TherapeuticClass = readString(dis);

					this.Attribute1 = readString(dis);

					this.Attribute2 = readString(dis);

					this.Attribute3 = readString(dis);

					this.Attribute4 = readString(dis);

					this.Attribute5 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NameLevel1, dos);

				// String

				writeString(this.NameLevel2, dos);

				// String

				writeString(this.NameLevel3, dos);

				// String

				writeString(this.NameLevel4, dos);

				// String

				writeString(this.NameLevel5, dos);

				// String

				writeString(this.CodeLevel1, dos);

				// String

				writeString(this.CodeLevel2, dos);

				// String

				writeString(this.CodeLevel3, dos);

				// String

				writeString(this.CodeLevel4, dos);

				// String

				writeString(this.CodeLevel5, dos);

				// Float

				if (this.Package == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Package);
				}

				// Float

				if (this.StdBoxCoef == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.StdBoxCoef);
				}

				// String

				writeString(this.ManufacturerName, dos);

				// String

				writeString(this.TherapeuticClass, dos);

				// String

				writeString(this.Attribute1, dos);

				// String

				writeString(this.Attribute2, dos);

				// String

				writeString(this.Attribute3, dos);

				// String

				writeString(this.Attribute4, dos);

				// String

				writeString(this.Attribute5, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NameLevel1=" + NameLevel1);
			sb.append(",NameLevel2=" + NameLevel2);
			sb.append(",NameLevel3=" + NameLevel3);
			sb.append(",NameLevel4=" + NameLevel4);
			sb.append(",NameLevel5=" + NameLevel5);
			sb.append(",CodeLevel1=" + CodeLevel1);
			sb.append(",CodeLevel2=" + CodeLevel2);
			sb.append(",CodeLevel3=" + CodeLevel3);
			sb.append(",CodeLevel4=" + CodeLevel4);
			sb.append(",CodeLevel5=" + CodeLevel5);
			sb.append(",Package=" + String.valueOf(Package));
			sb.append(",StdBoxCoef=" + String.valueOf(StdBoxCoef));
			sb.append(",ManufacturerName=" + ManufacturerName);
			sb.append(",TherapeuticClass=" + TherapeuticClass);
			sb.append(",Attribute1=" + Attribute1);
			sb.append(",Attribute2=" + Attribute2);
			sb.append(",Attribute3=" + Attribute3);
			sb.append(",Attribute4=" + Attribute4);
			sb.append(",Attribute5=" + Attribute5);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_ExtractFieldsSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_ExtractFieldsSample = new byte[0];

		public String NameLevel1;

		public String getNameLevel1() {
			return this.NameLevel1;
		}

		public String NameLevel2;

		public String getNameLevel2() {
			return this.NameLevel2;
		}

		public String NameLevel3;

		public String getNameLevel3() {
			return this.NameLevel3;
		}

		public String NameLevel4;

		public String getNameLevel4() {
			return this.NameLevel4;
		}

		public String NameLevel5;

		public String getNameLevel5() {
			return this.NameLevel5;
		}

		public String CodeLevel1;

		public String getCodeLevel1() {
			return this.CodeLevel1;
		}

		public String CodeLevel2;

		public String getCodeLevel2() {
			return this.CodeLevel2;
		}

		public String CodeLevel3;

		public String getCodeLevel3() {
			return this.CodeLevel3;
		}

		public String CodeLevel4;

		public String getCodeLevel4() {
			return this.CodeLevel4;
		}

		public String CodeLevel5;

		public String getCodeLevel5() {
			return this.CodeLevel5;
		}

		public String Package;

		public String getPackage() {
			return this.Package;
		}

		public String StdBoxCoef;

		public String getStdBoxCoef() {
			return this.StdBoxCoef;
		}

		public String ManufacturerName;

		public String getManufacturerName() {
			return this.ManufacturerName;
		}

		public String TherapeuticClass;

		public String getTherapeuticClass() {
			return this.TherapeuticClass;
		}

		public String Attribute1;

		public String getAttribute1() {
			return this.Attribute1;
		}

		public String Attribute2;

		public String getAttribute2() {
			return this.Attribute2;
		}

		public String Attribute3;

		public String getAttribute3() {
			return this.Attribute3;
		}

		public String Attribute4;

		public String getAttribute4() {
			return this.Attribute4;
		}

		public String Attribute5;

		public String getAttribute5() {
			return this.Attribute5;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_ExtractFieldsSample.length) {
					if (length < 1024
							&& commonByteArray_SAMPLES_ExtractFieldsSample.length == 0) {
						commonByteArray_SAMPLES_ExtractFieldsSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_ExtractFieldsSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_ExtractFieldsSample, 0,
						length);
				strReturn = new String(
						commonByteArray_SAMPLES_ExtractFieldsSample, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_ExtractFieldsSample) {

				try {

					int length = 0;

					this.NameLevel1 = readString(dis);

					this.NameLevel2 = readString(dis);

					this.NameLevel3 = readString(dis);

					this.NameLevel4 = readString(dis);

					this.NameLevel5 = readString(dis);

					this.CodeLevel1 = readString(dis);

					this.CodeLevel2 = readString(dis);

					this.CodeLevel3 = readString(dis);

					this.CodeLevel4 = readString(dis);

					this.CodeLevel5 = readString(dis);

					this.Package = readString(dis);

					this.StdBoxCoef = readString(dis);

					this.ManufacturerName = readString(dis);

					this.TherapeuticClass = readString(dis);

					this.Attribute1 = readString(dis);

					this.Attribute2 = readString(dis);

					this.Attribute3 = readString(dis);

					this.Attribute4 = readString(dis);

					this.Attribute5 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.NameLevel1, dos);

				// String

				writeString(this.NameLevel2, dos);

				// String

				writeString(this.NameLevel3, dos);

				// String

				writeString(this.NameLevel4, dos);

				// String

				writeString(this.NameLevel5, dos);

				// String

				writeString(this.CodeLevel1, dos);

				// String

				writeString(this.CodeLevel2, dos);

				// String

				writeString(this.CodeLevel3, dos);

				// String

				writeString(this.CodeLevel4, dos);

				// String

				writeString(this.CodeLevel5, dos);

				// String

				writeString(this.Package, dos);

				// String

				writeString(this.StdBoxCoef, dos);

				// String

				writeString(this.ManufacturerName, dos);

				// String

				writeString(this.TherapeuticClass, dos);

				// String

				writeString(this.Attribute1, dos);

				// String

				writeString(this.Attribute2, dos);

				// String

				writeString(this.Attribute3, dos);

				// String

				writeString(this.Attribute4, dos);

				// String

				writeString(this.Attribute5, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NameLevel1=" + NameLevel1);
			sb.append(",NameLevel2=" + NameLevel2);
			sb.append(",NameLevel3=" + NameLevel3);
			sb.append(",NameLevel4=" + NameLevel4);
			sb.append(",NameLevel5=" + NameLevel5);
			sb.append(",CodeLevel1=" + CodeLevel1);
			sb.append(",CodeLevel2=" + CodeLevel2);
			sb.append(",CodeLevel3=" + CodeLevel3);
			sb.append(",CodeLevel4=" + CodeLevel4);
			sb.append(",CodeLevel5=" + CodeLevel5);
			sb.append(",Package=" + Package);
			sb.append(",StdBoxCoef=" + StdBoxCoef);
			sb.append(",ManufacturerName=" + ManufacturerName);
			sb.append(",TherapeuticClass=" + TherapeuticClass);
			sb.append(",Attribute1=" + Attribute1);
			sb.append(",Attribute2=" + Attribute2);
			sb.append(",Attribute3=" + Attribute3);
			sb.append(",Attribute4=" + Attribute4);
			sb.append(",Attribute5=" + Attribute5);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_ExtractFieldsSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_ExtractFieldsSample = new byte[0];

		public Object fields;

		public Object getFields() {
			return this.fields;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_ExtractFieldsSample) {

				try {

					int length = 0;

					this.fields = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.fields);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fields=" + String.valueOf(fields));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_ExtractFieldsSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_ExtractFieldsSample = new byte[0];

		public Object fields;

		public Object getFields() {
			return this.fields;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_ExtractFieldsSample) {

				try {

					int length = 0;

					this.fields = (Object) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.fields);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fields=" + String.valueOf(fields));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMongoDBInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row1Struct row2 = row1;
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				row4Struct row5 = row4;

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				class BytesLimit65535_tLogRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogRow_1().limitLog4jByte();

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFlowMeter_7 begin ] start
				 */

				ok_Hash.put("tFlowMeter_7", false);
				start_Hash.put("tFlowMeter_7", System.currentTimeMillis());

				currentComponent = "tFlowMeter_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tFlowMeter_7 = 0;

				class BytesLimit65535_tFlowMeter_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowMeter_7().limitLog4jByte();

				int count_tFlowMeter_7 = 0;

				/**
				 * [tFlowMeter_7 begin ] stop
				 */

				/**
				 * [tConvertType_1 begin ] start
				 */

				ok_Hash.put("tConvertType_1", false);
				start_Hash.put("tConvertType_1", System.currentTimeMillis());

				currentComponent = "tConvertType_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tConvertType_1 = 0;

				class BytesLimit65535_tConvertType_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tConvertType_1().limitLog4jByte();
				int nb_line_tConvertType_1 = 0;

				/**
				 * [tConvertType_1 begin ] stop
				 */

				/**
				 * [tExtractFields_1 begin ] start
				 */

				ok_Hash.put("tExtractFields_1", false);
				start_Hash.put("tExtractFields_1", System.currentTimeMillis());

				currentComponent = "tExtractFields_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tExtractFields_1 = 0;

				class BytesLimit65535_tExtractFields_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractFields_1().limitLog4jByte();
				int nb_line_tExtractFields_1 = 0;

				class tExtractFields_1Utility {
					public String UnPivot(
							java.util.List<org.bson.Document> document,
							String key, String value, String keyValue) {
						return document.stream()
								.filter(x -> keyValue.equals(x.get(key)))
								.map(x -> x.get(value).toString()).findFirst()
								.orElse(null);
					}
				}
				tExtractFields_1Utility utility_tExtractFields_1 = new tExtractFields_1Utility();

				/**
				 * [tExtractFields_1 begin ] stop
				 */

				/**
				 * [tFlowMeter_4 begin ] start
				 */

				ok_Hash.put("tFlowMeter_4", false);
				start_Hash.put("tFlowMeter_4", System.currentTimeMillis());

				currentComponent = "tFlowMeter_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tFlowMeter_4 = 0;

				class BytesLimit65535_tFlowMeter_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowMeter_4().limitLog4jByte();

				int count_tFlowMeter_4 = 0;

				/**
				 * [tFlowMeter_4 begin ] stop
				 */

				/**
				 * [tMongoDBInput_1 begin ] start
				 */

				ok_Hash.put("tMongoDBInput_1", false);
				start_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				currentComponent = "tMongoDBInput_1";

				int tos_count_tMongoDBInput_1 = 0;

				class BytesLimit65535_tMongoDBInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBInput_1().limitLog4jByte();

				int nb_line_tMongoDBInput_1 = 0;

				com.mongodb.MongoClient mongo_tMongoDBInput_1 = null;
				com.mongodb.client.MongoDatabase db_tMongoDBInput_1 = null;

				mongo_tMongoDBInput_1 = (com.mongodb.MongoClient) globalMap
						.get("mongo_tMongoDBConnection_1");
				db_tMongoDBInput_1 = (com.mongodb.client.MongoDatabase) globalMap
						.get("db_tMongoDBConnection_1");

				com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_1 = db_tMongoDBInput_1
						.getCollection("master.records");

				try {
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";

					for (com.mongodb.DBObject index : coll_tMongoDBInput_1
							.listIndexes(com.mongodb.DBObject.class)) {

						for (String key : ((com.mongodb.DBObject) index
								.get("key")).keySet()) {
							// The regexp is:
							// - contain the db DBcolumnName between two
							// backslashed quotes
							// - is followed at some point by a colon
							// - there is no comma between the the DBcolumnName
							// and the colon
							if (("{}, {'_id':1, 'num':1, 'fields':1}")
									.matches(".*" + key + "[^,]*:.*")) {
								// We have an index, do not print error message
								needIndexWarning = false;
							} else {
								// This index is not in the query, add it into
								// the indexList
								indexList += ", " + key;
							}
						}
					}
					if ((!"".equals(indexList)) && (needIndexWarning)) {

						System.err
								.println("tMongoDBInput_1 - The query does not contain any reference an index.  ["
										+ indexList.substring(1) + " ]");

					}
				} catch (com.mongodb.MongoException e) {
					// caught an exception after issuing the getIndexInfo()
					// don't fail the whole job
					// maybe due to authorization
				}

				java.util.List<org.bson.Document> aggregationStages = new java.util.ArrayList<org.bson.Document>();

				aggregationStages
						.add(org.bson.Document
								.parse("{ $addFields: {'newFile': {$arrayToObject: {$map: {input: { $objectToArray: '$file' }, in: {k: {$cond:[{ $eq:[{'$substrCP':['$$this.k',0,1]},{$literal:'$'}] }, { $substrCP:['$$this.k',1,{$strLenCP:'$$this.k'}] }, '$$this.k'] }, v:'$$this.v'} } } } } }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $lookup: {from: 'master.files', localField: 'newFile.id', foreignField: '_id', as: 'file'} }"));

				aggregationStages
						.add(org.bson.Document
								.parse("{ $match : { 'file.metadata.type' : 'ProductHierarchy', 'sheetName' : 'ProductHierarchy'  } }"));

				aggregationStages.add(org.bson.Document
						.parse("{ $project: { newFile: 0 } }"));

				com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_1 = coll_tMongoDBInput_1
						.aggregate(aggregationStages).allowDiskUse(false)
						.iterator();

				class DBObjectInputUtil_tMongoDBInput_1 {
					// Get the node value in embedded document,
					// If have no embedded document get root document node.

					public Object getValue(String parentNode,
							String currentName, org.bson.Document dbObject) {
						Object value = null;
						if (dbObject == null) {
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
							if ("*".equals(currentName)) {
								value = dbObject;
							} else if (dbObject.get(currentName) != null) {
								value = dbObject.get(currentName);
							}
						} else {
							String objNames[] = objNames = parentNode
									.split("\\.");
							org.bson.Document currentObj = dbObject;
							for (int i = 0; i < objNames.length; i++) {
								currentObj = (org.bson.Document) currentObj
										.get(objNames[i]);
								if (currentObj == null) {
									break;
								}
							}
							if ("*".equals(currentName)) {
								value = currentObj;
							} else if (currentObj != null) {
								value = currentObj.get(currentName);
							}
						}
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_1 dbObjectInputUtil_tMongoDBInput_1 = new DBObjectInputUtil_tMongoDBInput_1();
				java.util.Map<String, String> pathMap_tMongoDBInput_1 = new java.util.HashMap<String, String>();
				pathMap_tMongoDBInput_1.put("fields", "");

				while (cursor_tMongoDBInput_1.hasNext()) {
					org.bson.Document o_tMongoDBInput_1 = cursor_tMongoDBInput_1
							.next();
					nb_line_tMongoDBInput_1++;
					Object valueObj_tMongoDBInput_1 = null;
					valueObj_tMongoDBInput_1 = dbObjectInputUtil_tMongoDBInput_1
							.getValue(pathMap_tMongoDBInput_1.get("fields"),
									"fields", o_tMongoDBInput_1);
					row1.fields = valueObj_tMongoDBInput_1;

					/**
					 * [tMongoDBInput_1 begin ] stop
					 */

					/**
					 * [tMongoDBInput_1 main ] start
					 */

					currentComponent = "tMongoDBInput_1";

					tos_count_tMongoDBInput_1++;

					/**
					 * [tMongoDBInput_1 main ] stop
					 */

					/**
					 * [tMongoDBInput_1 process_data_begin ] start
					 */

					currentComponent = "tMongoDBInput_1";

					/**
					 * [tMongoDBInput_1 process_data_begin ] stop
					 */

					/**
					 * [tFlowMeter_4 main ] start
					 */

					currentComponent = "tFlowMeter_4";

					// row1
					// row1

					if (execStat) {
						runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
					}

					count_tFlowMeter_4++;

					row2 = row1;

					tos_count_tFlowMeter_4++;

					/**
					 * [tFlowMeter_4 main ] stop
					 */

					/**
					 * [tFlowMeter_4 process_data_begin ] start
					 */

					currentComponent = "tFlowMeter_4";

					/**
					 * [tFlowMeter_4 process_data_begin ] stop
					 */

					/**
					 * [tExtractFields_1 main ] start
					 */

					currentComponent = "tExtractFields_1";

					// row2
					// row2

					if (execStat) {
						runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
					}

					List<org.bson.Document> doc_tExtractFields_1 = (List<org.bson.Document>) row2.fields;
					row3.NameLevel1 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "NameLevel1");
					row3.NameLevel2 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "NameLevel2");
					row3.NameLevel3 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "NameLevel3");
					row3.NameLevel4 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "NameLevel4");
					row3.NameLevel5 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "NameLevel5");
					row3.CodeLevel1 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "CodeLevel1");
					row3.CodeLevel2 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "CodeLevel2");
					row3.CodeLevel3 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "CodeLevel3");
					row3.CodeLevel4 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "CodeLevel4");
					row3.CodeLevel5 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "CodeLevel5");
					row3.Package = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "Package");
					row3.StdBoxCoef = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "StdBoxCoef");
					row3.ManufacturerName = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value",
							"ManufacturerName");
					row3.TherapeuticClass = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value",
							"TherapeuticClass");
					row3.Attribute1 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "Attribute1");
					row3.Attribute2 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "Attribute2");
					row3.Attribute3 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "Attribute3");
					row3.Attribute4 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "Attribute4");
					row3.Attribute5 = utility_tExtractFields_1.UnPivot(
							doc_tExtractFields_1, "tag", "value", "Attribute5");
					nb_line_tExtractFields_1++;

					tos_count_tExtractFields_1++;

					/**
					 * [tExtractFields_1 main ] stop
					 */

					/**
					 * [tExtractFields_1 process_data_begin ] start
					 */

					currentComponent = "tExtractFields_1";

					/**
					 * [tExtractFields_1 process_data_begin ] stop
					 */
					// Start of branch "row3"
					if (row3 != null) {

						/**
						 * [tConvertType_1 main ] start
						 */

						currentComponent = "tConvertType_1";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						row4 = new row4Struct();
						boolean bHasError_tConvertType_1 = false;
						try {
							if ("".equals(row3.NameLevel1)) {
								row3.NameLevel1 = null;
							}
							row4.NameLevel1 = TypeConvert
									.String2String(row3.NameLevel1);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.NameLevel2)) {
								row3.NameLevel2 = null;
							}
							row4.NameLevel2 = TypeConvert
									.String2String(row3.NameLevel2);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.NameLevel3)) {
								row3.NameLevel3 = null;
							}
							row4.NameLevel3 = TypeConvert
									.String2String(row3.NameLevel3);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.NameLevel4)) {
								row3.NameLevel4 = null;
							}
							row4.NameLevel4 = TypeConvert
									.String2String(row3.NameLevel4);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.NameLevel5)) {
								row3.NameLevel5 = null;
							}
							row4.NameLevel5 = TypeConvert
									.String2String(row3.NameLevel5);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.CodeLevel1)) {
								row3.CodeLevel1 = null;
							}
							row4.CodeLevel1 = TypeConvert
									.String2String(row3.CodeLevel1);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.CodeLevel2)) {
								row3.CodeLevel2 = null;
							}
							row4.CodeLevel2 = TypeConvert
									.String2String(row3.CodeLevel2);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.CodeLevel3)) {
								row3.CodeLevel3 = null;
							}
							row4.CodeLevel3 = TypeConvert
									.String2String(row3.CodeLevel3);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.CodeLevel4)) {
								row3.CodeLevel4 = null;
							}
							row4.CodeLevel4 = TypeConvert
									.String2String(row3.CodeLevel4);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.CodeLevel5)) {
								row3.CodeLevel5 = null;
							}
							row4.CodeLevel5 = TypeConvert
									.String2String(row3.CodeLevel5);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.Package)) {
								row3.Package = null;
							}
							row4.Package = TypeConvert
									.String2Float(row3.Package);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.StdBoxCoef)) {
								row3.StdBoxCoef = null;
							}
							row4.StdBoxCoef = TypeConvert
									.String2Float(row3.StdBoxCoef);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.ManufacturerName)) {
								row3.ManufacturerName = null;
							}
							row4.ManufacturerName = TypeConvert
									.String2String(row3.ManufacturerName);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.TherapeuticClass)) {
								row3.TherapeuticClass = null;
							}
							row4.TherapeuticClass = TypeConvert
									.String2String(row3.TherapeuticClass);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.Attribute1)) {
								row3.Attribute1 = null;
							}
							row4.Attribute1 = TypeConvert
									.String2String(row3.Attribute1);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.Attribute2)) {
								row3.Attribute2 = null;
							}
							row4.Attribute2 = TypeConvert
									.String2String(row3.Attribute2);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.Attribute3)) {
								row3.Attribute3 = null;
							}
							row4.Attribute3 = TypeConvert
									.String2String(row3.Attribute3);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.Attribute4)) {
								row3.Attribute4 = null;
							}
							row4.Attribute4 = TypeConvert
									.String2String(row3.Attribute4);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						try {
							if ("".equals(row3.Attribute5)) {
								row3.Attribute5 = null;
							}
							row4.Attribute5 = TypeConvert
									.String2String(row3.Attribute5);
						} catch (java.lang.Exception e) {
							bHasError_tConvertType_1 = true;
							System.err.println(e.getMessage());
						}
						if (bHasError_tConvertType_1) {
							row4 = null;
						}

						nb_line_tConvertType_1++;

						tos_count_tConvertType_1++;

						/**
						 * [tConvertType_1 main ] stop
						 */

						/**
						 * [tConvertType_1 process_data_begin ] start
						 */

						currentComponent = "tConvertType_1";

						/**
						 * [tConvertType_1 process_data_begin ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tFlowMeter_7 main ] start
							 */

							currentComponent = "tFlowMeter_7";

							// row4
							// row4

							if (execStat) {
								runStat.updateStatOnConnection("row4"
										+ iterateId, 1, 1);
							}

							count_tFlowMeter_7++;

							row5 = row4;

							tos_count_tFlowMeter_7++;

							/**
							 * [tFlowMeter_7 main ] stop
							 */

							/**
							 * [tFlowMeter_7 process_data_begin ] start
							 */

							currentComponent = "tFlowMeter_7";

							/**
							 * [tFlowMeter_7 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							// row5
							// row5

							if (execStat) {
								runStat.updateStatOnConnection("row5"
										+ iterateId, 1, 1);
							}

							// /////////////////////

							strBuffer_tLogRow_1 = new StringBuilder();

							if (row5.NameLevel1 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.NameLevel1));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.NameLevel2 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.NameLevel2));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.NameLevel3 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.NameLevel3));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.NameLevel4 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.NameLevel4));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.NameLevel5 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.NameLevel5));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.CodeLevel1 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.CodeLevel1));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.CodeLevel2 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.CodeLevel2));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.CodeLevel3 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.CodeLevel3));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.CodeLevel4 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.CodeLevel4));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.CodeLevel5 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.CodeLevel5));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.Package != null) { //

								strBuffer_tLogRow_1.append(FormatterUtils
										.formatUnwithE(row5.Package));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.StdBoxCoef != null) { //

								strBuffer_tLogRow_1.append(FormatterUtils
										.formatUnwithE(row5.StdBoxCoef));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.ManufacturerName != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.ManufacturerName));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.TherapeuticClass != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.TherapeuticClass));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.Attribute1 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.Attribute1));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.Attribute2 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.Attribute2));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.Attribute3 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.Attribute3));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.Attribute4 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.Attribute4));

							} //

							strBuffer_tLogRow_1.append("|");

							if (row5.Attribute5 != null) { //

								strBuffer_tLogRow_1.append(String
										.valueOf(row5.Attribute5));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_1 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_1);
							}
							consoleOut_tLogRow_1.println(strBuffer_tLogRow_1
									.toString());
							consoleOut_tLogRow_1.flush();
							nb_line_tLogRow_1++;
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

							/**
							 * [tFlowMeter_7 process_data_end ] start
							 */

							currentComponent = "tFlowMeter_7";

							/**
							 * [tFlowMeter_7 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tConvertType_1 process_data_end ] start
						 */

						currentComponent = "tConvertType_1";

						/**
						 * [tConvertType_1 process_data_end ] stop
						 */

					} // End of branch "row3"

					/**
					 * [tExtractFields_1 process_data_end ] start
					 */

					currentComponent = "tExtractFields_1";

					/**
					 * [tExtractFields_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeter_4 process_data_end ] start
					 */

					currentComponent = "tFlowMeter_4";

					/**
					 * [tFlowMeter_4 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_1 process_data_end ] start
					 */

					currentComponent = "tMongoDBInput_1";

					/**
					 * [tMongoDBInput_1 process_data_end ] stop
					 */

					/**
					 * [tMongoDBInput_1 end ] start
					 */

					currentComponent = "tMongoDBInput_1";

				}

				globalMap.put("tMongoDBInput_1_NB_LINE",
						nb_line_tMongoDBInput_1);

				ok_Hash.put("tMongoDBInput_1", true);
				end_Hash.put("tMongoDBInput_1", System.currentTimeMillis());

				/**
				 * [tMongoDBInput_1 end ] stop
				 */

				/**
				 * [tFlowMeter_4 end ] start
				 */

				currentComponent = "tFlowMeter_4";

				tFlowMeterCatcher_1.addMessage("row1", new Integer(
						count_tFlowMeter_4), "null", "", "tFlowMeter_4");

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFlowMeter_4", true);
				end_Hash.put("tFlowMeter_4", System.currentTimeMillis());

				/**
				 * [tFlowMeter_4 end ] stop
				 */

				/**
				 * [tExtractFields_1 end ] start
				 */

				currentComponent = "tExtractFields_1";

				globalMap.put("tExtractFields_1_NB_LINE",
						nb_line_tExtractFields_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tExtractFields_1", true);
				end_Hash.put("tExtractFields_1", System.currentTimeMillis());

				/**
				 * [tExtractFields_1 end ] stop
				 */

				/**
				 * [tConvertType_1 end ] start
				 */

				currentComponent = "tConvertType_1";

				globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tConvertType_1", true);
				end_Hash.put("tConvertType_1", System.currentTimeMillis());

				/**
				 * [tConvertType_1 end ] stop
				 */

				/**
				 * [tFlowMeter_7 end ] start
				 */

				currentComponent = "tFlowMeter_7";

				tFlowMeterCatcher_1.addMessage("row4", new Integer(
						count_tFlowMeter_7), "null", "", "tFlowMeter_7");

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFlowMeter_7", true);
				end_Hash.put("tFlowMeter_7", System.currentTimeMillis());

				/**
				 * [tFlowMeter_7 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

			tFlowMeterCatcher_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tMongoDBInput_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tMongoDBClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBInput_1 finally ] start
				 */

				currentComponent = "tMongoDBInput_1";

				/**
				 * [tMongoDBInput_1 finally ] stop
				 */

				/**
				 * [tFlowMeter_4 finally ] start
				 */

				currentComponent = "tFlowMeter_4";

				/**
				 * [tFlowMeter_4 finally ] stop
				 */

				/**
				 * [tExtractFields_1 finally ] start
				 */

				currentComponent = "tExtractFields_1";

				/**
				 * [tExtractFields_1 finally ] stop
				 */

				/**
				 * [tConvertType_1 finally ] start
				 */

				currentComponent = "tConvertType_1";

				/**
				 * [tConvertType_1 finally ] stop
				 */

				/**
				 * [tFlowMeter_7 finally ] start
				 */

				currentComponent = "tFlowMeter_7";

				/**
				 * [tFlowMeter_7 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tMongoDBClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMongoDBClose_1 begin ] start
				 */

				ok_Hash.put("tMongoDBClose_1", false);
				start_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				currentComponent = "tMongoDBClose_1";

				int tos_count_tMongoDBClose_1 = 0;

				class BytesLimit65535_tMongoDBClose_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMongoDBClose_1().limitLog4jByte();

				/**
				 * [tMongoDBClose_1 begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 main ] start
				 */

				currentComponent = "tMongoDBClose_1";

				com.mongodb.Mongo mongo_tMongoDBClose_1 = (com.mongodb.Mongo) globalMap
						.get("mongo_tMongoDBConnection_1");
				if (mongo_tMongoDBClose_1 != null) {

					mongo_tMongoDBClose_1.close();

				}

				tos_count_tMongoDBClose_1++;

				/**
				 * [tMongoDBClose_1 main ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tMongoDBClose_1 process_data_end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tMongoDBClose_1 end ] start
				 */

				currentComponent = "tMongoDBClose_1";

				ok_Hash.put("tMongoDBClose_1", true);
				end_Hash.put("tMongoDBClose_1", System.currentTimeMillis());

				/**
				 * [tMongoDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMongoDBClose_1 finally ] start
				 */

				currentComponent = "tMongoDBClose_1";

				/**
				 * [tMongoDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMongoDBClose_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ExtractFieldsSample ExtractFieldsSampleClass = new ExtractFieldsSample();

		int exitCode = ExtractFieldsSampleClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ExtractFieldsSample.class
					.getClassLoader().getResourceAsStream(
							"samples/extractfieldssample_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = ExtractFieldsSample.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tMongoDBConnection_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tMongoDBConnection_1) {
					globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", -1);

					e_tMongoDBConnection_1.printStackTrace();

				} catch (java.lang.Error e_tMongoDBConnection_1) {
					globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tMongoDBConnection_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : ExtractFieldsSample");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 123054 characters generated by Talend Open Studio for Big Data on the 13
 * November, 2018 11:51:50 AM ICT
 ************************************************************************************************/
