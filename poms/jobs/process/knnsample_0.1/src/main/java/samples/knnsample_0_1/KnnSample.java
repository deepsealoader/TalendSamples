// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package samples.knnsample_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: KnnSample Purpose: Demonstrate the usage of KNN algorithm<br>
 * Description: Demonstrate the usage of KNN algorithm on Fisher dataset <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status DEV
 */
public class KnnSample implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "KnnSample";
	private final String projectName = "SAMPLES";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_v2hkMLgPEei30bV-SVSjVA", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					KnnSample.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(KnnSample.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSampleRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tShujuTrain_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSampleRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBufferOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBufferInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tShujuPredict_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeter_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tChronometerStop_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tShujuTransform_2_TransformOut_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tShujuTransform_2_TransformIn_error(exception, errorComponent, globalMap);

	}

	public void tShujuTransform_2_TransformIn_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tBufferInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtShujuTransform_2
			implements routines.system.IPersistableRow<OnRowsEndStructtShujuTransform_2> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtShujuTransform_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int dataOrder;

		public int getDataOrder() {
			return this.dataOrder;
		}

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.dataOrder;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.dataOrder != other.dataOrder)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.dataOrder = this.dataOrder;
			other.sepalLength = this.sepalLength;
			other.sepalWidth = this.sepalWidth;
			other.petalLength = this.petalLength;
			other.petalWidth = this.petalWidth;
			other.species = this.species;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.dataOrder = this.dataOrder;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.dataOrder = dis.readInt();

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.dataOrder);

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("dataOrder=" + String.valueOf(dataOrder));
			sb.append(",sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.dataOrder, other.dataOrder);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				row12Struct row12 = new row12Struct();
				row5Struct row5 = new row5Struct();
				row5Struct row3 = row5;
				row6Struct row6 = new row6Struct();
				row2Struct row2 = new row2Struct();
				row2Struct row14 = row2;
				row7Struct row7 = new row7Struct();
				row1Struct row1 = new row1Struct();
				row1Struct row15 = row1;

				/**
				 * [tShujuTransform_2_TransformOut begin ] start
				 */

				ok_Hash.put("tShujuTransform_2_TransformOut", false);
				start_Hash.put("tShujuTransform_2_TransformOut", System.currentTimeMillis());

				currentVirtualComponent = "tShujuTransform_2";

				currentComponent = "tShujuTransform_2_TransformOut";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tShujuTransform_2_TransformOut = 0;

				int nb_line_tShujuTransform_2_TransformOut = 0;

				com.github.romualdrousseau.shuju.DataSet dataset_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.DataSet();

				com.github.romualdrousseau.shuju.DataSet another_dataset_tShujuTransform_2_TransformOut = null;

				/**
				 * [tShujuTransform_2_TransformOut begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/RRU_SG1/Projects/Talend/workspace/SAMPLES/data/fisher's data.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/RRU_SG1/Projects/Talend/workspace/SAMPLES/data/fisher's data.csv",
								"ISO-8859-15", ",", "\n", true, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row4 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row4 = new row4Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row4.dataOrder = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"dataOrder", "row4", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'dataOrder' in 'row4' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row4.sepalLength = ParserUtils.parseTo_double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"sepalLength", "row4", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'sepalLength' in 'row4' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row4.sepalWidth = ParserUtils.parseTo_double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"sepalWidth", "row4", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'sepalWidth' in 'row4' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row4.petalLength = ParserUtils.parseTo_double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"petalLength", "row4", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'petalLength' in 'row4' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row4.petalWidth = ParserUtils.parseTo_double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"petalWidth", "row4", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								rowstate_tFileInputDelimited_1.setException(new RuntimeException(
										"Value is empty for column : 'petalWidth' in 'row4' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row4.species = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tFilterColumns_1 main ] start
							 */

							currentComponent = "tFilterColumns_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							row12.sepalLength = row4.sepalLength;

							row12.sepalWidth = row4.sepalWidth;

							row12.petalLength = row4.petalLength;

							row12.petalWidth = row4.petalWidth;

							row12.species = row4.species;

							nb_line_tFilterColumns_1++;

							tos_count_tFilterColumns_1++;

							/**
							 * [tFilterColumns_1 main ] stop
							 */

							/**
							 * [tFilterColumns_1 process_data_begin ] start
							 */

							currentComponent = "tFilterColumns_1";

							/**
							 * [tFilterColumns_1 process_data_begin ] stop
							 */

							/**
							 * [tShujuTransform_2_TransformOut main ] start
							 */

							currentVirtualComponent = "tShujuTransform_2";

							currentComponent = "tShujuTransform_2_TransformOut";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
							}

							com.github.romualdrousseau.shuju.DataRow row_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.DataRow();
							com.github.romualdrousseau.shuju.features.NumericFeature feature_sepalLength_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.features.NumericFeature(
									row12.sepalLength);
							row_tShujuTransform_2_TransformOut
									.addFeature(feature_sepalLength_tShujuTransform_2_TransformOut);
							com.github.romualdrousseau.shuju.features.NumericFeature feature_sepalWidth_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.features.NumericFeature(
									row12.sepalWidth);
							row_tShujuTransform_2_TransformOut
									.addFeature(feature_sepalWidth_tShujuTransform_2_TransformOut);
							com.github.romualdrousseau.shuju.features.NumericFeature feature_petalLength_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.features.NumericFeature(
									row12.petalLength);
							row_tShujuTransform_2_TransformOut
									.addFeature(feature_petalLength_tShujuTransform_2_TransformOut);
							com.github.romualdrousseau.shuju.features.NumericFeature feature_petalWidth_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.features.NumericFeature(
									row12.petalWidth);
							row_tShujuTransform_2_TransformOut
									.addFeature(feature_petalWidth_tShujuTransform_2_TransformOut);
							com.github.romualdrousseau.shuju.features.StringFeature feature_species_tShujuTransform_2_TransformOut = new com.github.romualdrousseau.shuju.features.StringFeature(
									row12.species);
							row_tShujuTransform_2_TransformOut.setLabel(feature_species_tShujuTransform_2_TransformOut);
							dataset_tShujuTransform_2_TransformOut.addRow(row_tShujuTransform_2_TransformOut);

							nb_line_tShujuTransform_2_TransformOut++;

							tos_count_tShujuTransform_2_TransformOut++;

							/**
							 * [tShujuTransform_2_TransformOut main ] stop
							 */

							/**
							 * [tShujuTransform_2_TransformOut process_data_begin ] start
							 */

							currentVirtualComponent = "tShujuTransform_2";

							currentComponent = "tShujuTransform_2_TransformOut";

							/**
							 * [tShujuTransform_2_TransformOut process_data_begin ] stop
							 */

							/**
							 * [tShujuTransform_2_TransformOut process_data_end ] start
							 */

							currentVirtualComponent = "tShujuTransform_2";

							currentComponent = "tShujuTransform_2_TransformOut";

							/**
							 * [tShujuTransform_2_TransformOut process_data_end ] stop
							 */

							/**
							 * [tFilterColumns_1 process_data_end ] start
							 */

							currentComponent = "tFilterColumns_1";

							/**
							 * [tFilterColumns_1 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/RRU_SG1/Projects/Talend/workspace/SAMPLES/data/fisher's data.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE", nb_line_tFilterColumns_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tShujuTransform_2_TransformOut end ] start
				 */

				currentVirtualComponent = "tShujuTransform_2";

				currentComponent = "tShujuTransform_2_TransformOut";

				com.github.romualdrousseau.shuju.DataSummary dataSummary_tShujuTransform_2_TransformOut_sepalLength = new com.github.romualdrousseau.shuju.DataSummary(
						dataset_tShujuTransform_2_TransformOut, 0);
				dataset_tShujuTransform_2_TransformOut
						.transform(new com.github.romualdrousseau.shuju.transforms.NumericScaler(
								dataSummary_tShujuTransform_2_TransformOut_sepalLength), 0);
				com.github.romualdrousseau.shuju.DataSummary dataSummary_tShujuTransform_2_TransformOut_sepalWidth = new com.github.romualdrousseau.shuju.DataSummary(
						dataset_tShujuTransform_2_TransformOut, 1);
				dataset_tShujuTransform_2_TransformOut
						.transform(new com.github.romualdrousseau.shuju.transforms.NumericScaler(
								dataSummary_tShujuTransform_2_TransformOut_sepalWidth), 1);
				com.github.romualdrousseau.shuju.DataSummary dataSummary_tShujuTransform_2_TransformOut_petalLength = new com.github.romualdrousseau.shuju.DataSummary(
						dataset_tShujuTransform_2_TransformOut, 2);
				dataset_tShujuTransform_2_TransformOut
						.transform(new com.github.romualdrousseau.shuju.transforms.NumericScaler(
								dataSummary_tShujuTransform_2_TransformOut_petalLength), 2);
				com.github.romualdrousseau.shuju.DataSummary dataSummary_tShujuTransform_2_TransformOut_petalWidth = new com.github.romualdrousseau.shuju.DataSummary(
						dataset_tShujuTransform_2_TransformOut, 3);
				dataset_tShujuTransform_2_TransformOut
						.transform(new com.github.romualdrousseau.shuju.transforms.NumericScaler(
								dataSummary_tShujuTransform_2_TransformOut_petalWidth), 3);
				dataset_tShujuTransform_2_TransformOut.shuffle();

				globalMap.put("tShujuTransform_2", dataset_tShujuTransform_2_TransformOut);
				globalMap.put("tShujuTransform_2_TransformOut_NB_LINE", nb_line_tShujuTransform_2_TransformOut);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tShujuTransform_2_TransformOut", true);
				end_Hash.put("tShujuTransform_2_TransformOut", System.currentTimeMillis());

				/**
				 * [tShujuTransform_2_TransformOut end ] stop
				 */

				/**
				 * [tShujuTrain_1 begin ] start
				 */

				ok_Hash.put("tShujuTrain_1", false);
				start_Hash.put("tShujuTrain_1", System.currentTimeMillis());

				currentComponent = "tShujuTrain_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tShujuTrain_1 = 0;

				int nb_line_tShujuTrain_1 = 0;

				com.github.romualdrousseau.shuju.DataSet dataset_tShujuTrain_1 = new com.github.romualdrousseau.shuju.DataSet();

				/**
				 * [tShujuTrain_1 begin ] stop
				 */

				/**
				 * [tFlowMeter_15 begin ] start
				 */

				ok_Hash.put("tFlowMeter_15", false);
				start_Hash.put("tFlowMeter_15", System.currentTimeMillis());

				currentComponent = "tFlowMeter_15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFlowMeter_15 = 0;

				int count_tFlowMeter_15 = 0;

				/**
				 * [tFlowMeter_15 begin ] stop
				 */

				/**
				 * [tSampleRow_1 begin ] start
				 */

				ok_Hash.put("tSampleRow_1", false);
				start_Hash.put("tSampleRow_1", System.currentTimeMillis());

				currentComponent = "tSampleRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tSampleRow_1 = 0;

				String[] rangetSampleRow_1 = "1..120".split(",");
				java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

				Integer nb_line_tSampleRow_1 = 0;

				for (int i = 0; i < rangetSampleRow_1.length; i++) {

					if (rangetSampleRow_1[i].matches("\\d+")) {

						rangeSettSampleRow_1.add(Integer.valueOf(rangetSampleRow_1[i]));

					} else if (rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")) {

						String[] edgetSampleRow_1 = rangetSampleRow_1[i].split("\\.\\.");

						for (int j = Integer.valueOf(edgetSampleRow_1[0]).intValue(); j < Integer
								.valueOf(edgetSampleRow_1[1]).intValue() + 1; j++) {
							rangeSettSampleRow_1.add(Integer.valueOf(j));
						}
					} else {

					}

				}

				/**
				 * [tSampleRow_1 begin ] stop
				 */

				/**
				 * [tBufferOutput_1 begin ] start
				 */

				ok_Hash.put("tBufferOutput_1", false);
				start_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				currentComponent = "tBufferOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tBufferOutput_1 = 0;

				/**
				 * [tBufferOutput_1 begin ] stop
				 */

				/**
				 * [tFlowMeter_17 begin ] start
				 */

				ok_Hash.put("tFlowMeter_17", false);
				start_Hash.put("tFlowMeter_17", System.currentTimeMillis());

				currentComponent = "tFlowMeter_17";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFlowMeter_17 = 0;

				int count_tFlowMeter_17 = 0;

				/**
				 * [tFlowMeter_17 begin ] stop
				 */

				/**
				 * [tSampleRow_2 begin ] start
				 */

				ok_Hash.put("tSampleRow_2", false);
				start_Hash.put("tSampleRow_2", System.currentTimeMillis());

				currentComponent = "tSampleRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tSampleRow_2 = 0;

				String[] rangetSampleRow_2 = "121..150".split(",");
				java.util.Set rangeSettSampleRow_2 = new java.util.HashSet();

				Integer nb_line_tSampleRow_2 = 0;

				for (int i = 0; i < rangetSampleRow_2.length; i++) {

					if (rangetSampleRow_2[i].matches("\\d+")) {

						rangeSettSampleRow_2.add(Integer.valueOf(rangetSampleRow_2[i]));

					} else if (rangetSampleRow_2[i].matches("\\d+\\.\\.\\d+")) {

						String[] edgetSampleRow_2 = rangetSampleRow_2[i].split("\\.\\.");

						for (int j = Integer.valueOf(edgetSampleRow_2[0]).intValue(); j < Integer
								.valueOf(edgetSampleRow_2[1]).intValue() + 1; j++) {
							rangeSettSampleRow_2.add(Integer.valueOf(j));
						}
					} else {

					}

				}

				/**
				 * [tSampleRow_2 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tFlowMeter_12 begin ] start
				 */

				ok_Hash.put("tFlowMeter_12", false);
				start_Hash.put("tFlowMeter_12", System.currentTimeMillis());

				currentComponent = "tFlowMeter_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tFlowMeter_12 = 0;

				int count_tFlowMeter_12 = 0;

				/**
				 * [tFlowMeter_12 begin ] stop
				 */

				/**
				 * [tShujuTransform_2_TransformIn begin ] start
				 */

				ok_Hash.put("tShujuTransform_2_TransformIn", false);
				start_Hash.put("tShujuTransform_2_TransformIn", System.currentTimeMillis());

				currentVirtualComponent = "tShujuTransform_2";

				currentComponent = "tShujuTransform_2_TransformIn";

				int tos_count_tShujuTransform_2_TransformIn = 0;

				int nb_line_tShujuTransform_2_TransformIn = 0;

				com.github.romualdrousseau.shuju.DataSet dataset_tShujuTransform_2_TransformIn = (com.github.romualdrousseau.shuju.DataSet) globalMap
						.get("tShujuTransform_2");
				for (com.github.romualdrousseau.shuju.DataRow row_tShujuTransform_2_TransformIn : dataset_tShujuTransform_2_TransformIn
						.rows()) {
					row5.sepalLength = (Double) row_tShujuTransform_2_TransformIn.features().get(0).getValue();
					row5.sepalWidth = (Double) row_tShujuTransform_2_TransformIn.features().get(1).getValue();
					row5.petalLength = (Double) row_tShujuTransform_2_TransformIn.features().get(2).getValue();
					row5.petalWidth = (Double) row_tShujuTransform_2_TransformIn.features().get(3).getValue();
					row5.species = (String) row_tShujuTransform_2_TransformIn.getLabel().getValue();
					nb_line_tShujuTransform_2_TransformIn++;

					/**
					 * [tShujuTransform_2_TransformIn begin ] stop
					 */

					/**
					 * [tShujuTransform_2_TransformIn main ] start
					 */

					currentVirtualComponent = "tShujuTransform_2";

					currentComponent = "tShujuTransform_2_TransformIn";

					tos_count_tShujuTransform_2_TransformIn++;

					/**
					 * [tShujuTransform_2_TransformIn main ] stop
					 */

					/**
					 * [tShujuTransform_2_TransformIn process_data_begin ] start
					 */

					currentVirtualComponent = "tShujuTransform_2";

					currentComponent = "tShujuTransform_2_TransformIn";

					/**
					 * [tShujuTransform_2_TransformIn process_data_begin ] stop
					 */

					/**
					 * [tFlowMeter_12 main ] start
					 */

					currentComponent = "tFlowMeter_12";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
					}

					count_tFlowMeter_12++;

					row3 = row5;

					tos_count_tFlowMeter_12++;

					/**
					 * [tFlowMeter_12 main ] stop
					 */

					/**
					 * [tFlowMeter_12 process_data_begin ] start
					 */

					currentComponent = "tFlowMeter_12";

					/**
					 * [tFlowMeter_12 process_data_begin ] stop
					 */

					/**
					 * [tReplicate_1 main ] start
					 */

					currentComponent = "tReplicate_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
					}

					row6 = new row6Struct();

					row6.sepalLength = row3.sepalLength;
					row6.sepalWidth = row3.sepalWidth;
					row6.petalLength = row3.petalLength;
					row6.petalWidth = row3.petalWidth;
					row6.species = row3.species;
					row7 = new row7Struct();

					row7.sepalLength = row3.sepalLength;
					row7.sepalWidth = row3.sepalWidth;
					row7.petalLength = row3.petalLength;
					row7.petalWidth = row3.petalWidth;
					row7.species = row3.species;

					tos_count_tReplicate_1++;

					/**
					 * [tReplicate_1 main ] stop
					 */

					/**
					 * [tReplicate_1 process_data_begin ] start
					 */

					currentComponent = "tReplicate_1";

					/**
					 * [tReplicate_1 process_data_begin ] stop
					 */

					/**
					 * [tSampleRow_1 main ] start
					 */

					currentComponent = "tSampleRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
					}

					nb_line_tSampleRow_1++;

					if (!rangeSettSampleRow_1.contains(nb_line_tSampleRow_1)) {
						row2 = null;
					} else {
						row2 = new row2Struct();

						row2.sepalLength = row6.sepalLength;

						row2.sepalWidth = row6.sepalWidth;

						row2.petalLength = row6.petalLength;

						row2.petalWidth = row6.petalWidth;

						row2.species = row6.species;

					}

					tos_count_tSampleRow_1++;

					/**
					 * [tSampleRow_1 main ] stop
					 */

					/**
					 * [tSampleRow_1 process_data_begin ] start
					 */

					currentComponent = "tSampleRow_1";

					/**
					 * [tSampleRow_1 process_data_begin ] stop
					 */
// Start of branch "row2"
					if (row2 != null) {

						/**
						 * [tFlowMeter_15 main ] start
						 */

						currentComponent = "tFlowMeter_15";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						count_tFlowMeter_15++;

						row14 = row2;

						tos_count_tFlowMeter_15++;

						/**
						 * [tFlowMeter_15 main ] stop
						 */

						/**
						 * [tFlowMeter_15 process_data_begin ] start
						 */

						currentComponent = "tFlowMeter_15";

						/**
						 * [tFlowMeter_15 process_data_begin ] stop
						 */

						/**
						 * [tShujuTrain_1 main ] start
						 */

						currentComponent = "tShujuTrain_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
						}

						com.github.romualdrousseau.shuju.DataRow row_tShujuTrain_1 = new com.github.romualdrousseau.shuju.DataRow();
						com.github.romualdrousseau.shuju.features.NumericFeature feature_sepalLength_tShujuTrain_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
								row14.sepalLength);
						row_tShujuTrain_1.addFeature(feature_sepalLength_tShujuTrain_1);
						com.github.romualdrousseau.shuju.features.NumericFeature feature_sepalWidth_tShujuTrain_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
								row14.sepalWidth);
						row_tShujuTrain_1.addFeature(feature_sepalWidth_tShujuTrain_1);
						com.github.romualdrousseau.shuju.features.NumericFeature feature_petalLength_tShujuTrain_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
								row14.petalLength);
						row_tShujuTrain_1.addFeature(feature_petalLength_tShujuTrain_1);
						com.github.romualdrousseau.shuju.features.NumericFeature feature_petalWidth_tShujuTrain_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
								row14.petalWidth);
						row_tShujuTrain_1.addFeature(feature_petalWidth_tShujuTrain_1);
						com.github.romualdrousseau.shuju.features.StringFeature feature_species_tShujuTrain_1 = new com.github.romualdrousseau.shuju.features.StringFeature(
								row14.species);
						row_tShujuTrain_1.setLabel(feature_species_tShujuTrain_1);
						dataset_tShujuTrain_1.addRow(row_tShujuTrain_1);

						nb_line_tShujuTrain_1++;

						tos_count_tShujuTrain_1++;

						/**
						 * [tShujuTrain_1 main ] stop
						 */

						/**
						 * [tShujuTrain_1 process_data_begin ] start
						 */

						currentComponent = "tShujuTrain_1";

						/**
						 * [tShujuTrain_1 process_data_begin ] stop
						 */

						/**
						 * [tShujuTrain_1 process_data_end ] start
						 */

						currentComponent = "tShujuTrain_1";

						/**
						 * [tShujuTrain_1 process_data_end ] stop
						 */

						/**
						 * [tFlowMeter_15 process_data_end ] start
						 */

						currentComponent = "tFlowMeter_15";

						/**
						 * [tFlowMeter_15 process_data_end ] stop
						 */

					} // End of branch "row2"

					/**
					 * [tSampleRow_1 process_data_end ] start
					 */

					currentComponent = "tSampleRow_1";

					/**
					 * [tSampleRow_1 process_data_end ] stop
					 */

					/**
					 * [tSampleRow_2 main ] start
					 */

					currentComponent = "tSampleRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
					}

					nb_line_tSampleRow_2++;

					if (!rangeSettSampleRow_2.contains(nb_line_tSampleRow_2)) {
						row1 = null;
					} else {
						row1 = new row1Struct();

						row1.sepalLength = row7.sepalLength;

						row1.sepalWidth = row7.sepalWidth;

						row1.petalLength = row7.petalLength;

						row1.petalWidth = row7.petalWidth;

						row1.species = row7.species;

					}

					tos_count_tSampleRow_2++;

					/**
					 * [tSampleRow_2 main ] stop
					 */

					/**
					 * [tSampleRow_2 process_data_begin ] start
					 */

					currentComponent = "tSampleRow_2";

					/**
					 * [tSampleRow_2 process_data_begin ] stop
					 */
// Start of branch "row1"
					if (row1 != null) {

						/**
						 * [tFlowMeter_17 main ] start
						 */

						currentComponent = "tFlowMeter_17";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						count_tFlowMeter_17++;

						row15 = row1;

						tos_count_tFlowMeter_17++;

						/**
						 * [tFlowMeter_17 main ] stop
						 */

						/**
						 * [tFlowMeter_17 process_data_begin ] start
						 */

						currentComponent = "tFlowMeter_17";

						/**
						 * [tFlowMeter_17 process_data_begin ] stop
						 */

						/**
						 * [tBufferOutput_1 main ] start
						 */

						currentComponent = "tBufferOutput_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
						}

						String[] row_tBufferOutput_1 = new String[] { "", "", "", "", "", };
						row_tBufferOutput_1[0] = String.valueOf(row15.sepalLength);

						row_tBufferOutput_1[1] = String.valueOf(row15.sepalWidth);

						row_tBufferOutput_1[2] = String.valueOf(row15.petalLength);

						row_tBufferOutput_1[3] = String.valueOf(row15.petalWidth);

						if (row15.species != null) {

							row_tBufferOutput_1[4] = row15.species;

						} else {
							row_tBufferOutput_1[4] = null;
						}
						globalBuffer.add(row_tBufferOutput_1);

						tos_count_tBufferOutput_1++;

						/**
						 * [tBufferOutput_1 main ] stop
						 */

						/**
						 * [tBufferOutput_1 process_data_begin ] start
						 */

						currentComponent = "tBufferOutput_1";

						/**
						 * [tBufferOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tBufferOutput_1 process_data_end ] start
						 */

						currentComponent = "tBufferOutput_1";

						/**
						 * [tBufferOutput_1 process_data_end ] stop
						 */

						/**
						 * [tFlowMeter_17 process_data_end ] start
						 */

						currentComponent = "tFlowMeter_17";

						/**
						 * [tFlowMeter_17 process_data_end ] stop
						 */

					} // End of branch "row1"

					/**
					 * [tSampleRow_2 process_data_end ] start
					 */

					currentComponent = "tSampleRow_2";

					/**
					 * [tSampleRow_2 process_data_end ] stop
					 */

					/**
					 * [tReplicate_1 process_data_end ] start
					 */

					currentComponent = "tReplicate_1";

					/**
					 * [tReplicate_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeter_12 process_data_end ] start
					 */

					currentComponent = "tFlowMeter_12";

					/**
					 * [tFlowMeter_12 process_data_end ] stop
					 */

					/**
					 * [tShujuTransform_2_TransformIn process_data_end ] start
					 */

					currentVirtualComponent = "tShujuTransform_2";

					currentComponent = "tShujuTransform_2_TransformIn";

					/**
					 * [tShujuTransform_2_TransformIn process_data_end ] stop
					 */

					/**
					 * [tShujuTransform_2_TransformIn end ] start
					 */

					currentVirtualComponent = "tShujuTransform_2";

					currentComponent = "tShujuTransform_2_TransformIn";

				}

				globalMap.put("tShujuTransform_2_TransformIn_NB_LINE", nb_line_tShujuTransform_2_TransformIn);

				ok_Hash.put("tShujuTransform_2_TransformIn", true);
				end_Hash.put("tShujuTransform_2_TransformIn", System.currentTimeMillis());

				/**
				 * [tShujuTransform_2_TransformIn end ] stop
				 */

				/**
				 * [tFlowMeter_12 end ] start
				 */

				currentComponent = "tFlowMeter_12";

				tFlowMeterCatcher_1.addMessage("row5", new Integer(count_tFlowMeter_12), "null", "", "tFlowMeter_12");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tFlowMeter_12", true);
				end_Hash.put("tFlowMeter_12", System.currentTimeMillis());

				/**
				 * [tFlowMeter_12 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tSampleRow_1 end ] start
				 */

				currentComponent = "tSampleRow_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tSampleRow_1", true);
				end_Hash.put("tSampleRow_1", System.currentTimeMillis());

				/**
				 * [tSampleRow_1 end ] stop
				 */

				/**
				 * [tFlowMeter_15 end ] start
				 */

				currentComponent = "tFlowMeter_15";

				tFlowMeterCatcher_1.addMessage("row2", new Integer(count_tFlowMeter_15), "null", "", "tFlowMeter_15");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFlowMeter_15", true);
				end_Hash.put("tFlowMeter_15", System.currentTimeMillis());

				/**
				 * [tFlowMeter_15 end ] stop
				 */

				/**
				 * [tShujuTrain_1 end ] start
				 */

				currentComponent = "tShujuTrain_1";

				class tShujuTrain_1ClassifierFactory {
					public com.github.romualdrousseau.shuju.IClassifier getInstance() {
						return new com.github.romualdrousseau.shuju.ml.knn.KNN(6);
					}
				}
				com.github.romualdrousseau.shuju.IClassifier classifier_tShujuTrain_1 = new tShujuTrain_1ClassifierFactory()
						.getInstance();

				classifier_tShujuTrain_1.train(dataset_tShujuTrain_1);

				globalMap.put("classifier_tShujuTrain_1", classifier_tShujuTrain_1);
				globalMap.put("tShujuTrain_1_NB_LINE", nb_line_tShujuTrain_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tShujuTrain_1", true);
				end_Hash.put("tShujuTrain_1", System.currentTimeMillis());

				/**
				 * [tShujuTrain_1 end ] stop
				 */

				/**
				 * [tSampleRow_2 end ] start
				 */

				currentComponent = "tSampleRow_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tSampleRow_2", true);
				end_Hash.put("tSampleRow_2", System.currentTimeMillis());

				/**
				 * [tSampleRow_2 end ] stop
				 */

				/**
				 * [tFlowMeter_17 end ] start
				 */

				currentComponent = "tFlowMeter_17";

				tFlowMeterCatcher_1.addMessage("row1", new Integer(count_tFlowMeter_17), "null", "", "tFlowMeter_17");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFlowMeter_17", true);
				end_Hash.put("tFlowMeter_17", System.currentTimeMillis());

				/**
				 * [tFlowMeter_17 end ] stop
				 */

				/**
				 * [tBufferOutput_1 end ] start
				 */

				currentComponent = "tBufferOutput_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tBufferOutput_1", true);
				end_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				/**
				 * [tBufferOutput_1 end ] stop
				 */

			} // end the resume

			tFlowMeterCatcher_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tBufferInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tShujuTransform_2_TransformIn"
			globalMap.remove("tShujuTransform_2");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tShujuTransform_2_TransformOut finally ] start
				 */

				currentVirtualComponent = "tShujuTransform_2";

				currentComponent = "tShujuTransform_2_TransformOut";

				/**
				 * [tShujuTransform_2_TransformOut finally ] stop
				 */

				/**
				 * [tShujuTransform_2_TransformIn finally ] start
				 */

				currentVirtualComponent = "tShujuTransform_2";

				currentComponent = "tShujuTransform_2_TransformIn";

				/**
				 * [tShujuTransform_2_TransformIn finally ] stop
				 */

				/**
				 * [tFlowMeter_12 finally ] start
				 */

				currentComponent = "tFlowMeter_12";

				/**
				 * [tFlowMeter_12 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tSampleRow_1 finally ] start
				 */

				currentComponent = "tSampleRow_1";

				/**
				 * [tSampleRow_1 finally ] stop
				 */

				/**
				 * [tFlowMeter_15 finally ] start
				 */

				currentComponent = "tFlowMeter_15";

				/**
				 * [tFlowMeter_15 finally ] stop
				 */

				/**
				 * [tShujuTrain_1 finally ] start
				 */

				currentComponent = "tShujuTrain_1";

				/**
				 * [tShujuTrain_1 finally ] stop
				 */

				/**
				 * [tSampleRow_2 finally ] start
				 */

				currentComponent = "tSampleRow_2";

				/**
				 * [tSampleRow_2 finally ] stop
				 */

				/**
				 * [tFlowMeter_17 finally ] start
				 */

				currentComponent = "tFlowMeter_17";

				/**
				 * [tFlowMeter_17 finally ] stop
				 */

				/**
				 * [tBufferOutput_1 finally ] start
				 */

				currentComponent = "tBufferOutput_1";

				/**
				 * [tBufferOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public Double CORRECT;

		public Double getCORRECT() {
			return this.CORRECT;
		}

		public Double INCORRECT;

		public Double getINCORRECT() {
			return this.INCORRECT;
		}

		public Double ERROR_MIN;

		public Double getERROR_MIN() {
			return this.ERROR_MIN;
		}

		public Double ERROR_AVG;

		public Double getERROR_AVG() {
			return this.ERROR_AVG;
		}

		public Double ERROR_STD;

		public Double getERROR_STD() {
			return this.ERROR_STD;
		}

		public Double ERROR_MAX;

		public Double getERROR_MAX() {
			return this.ERROR_MAX;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.CORRECT = null;
					} else {
						this.CORRECT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.INCORRECT = null;
					} else {
						this.INCORRECT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ERROR_MIN = null;
					} else {
						this.ERROR_MIN = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ERROR_AVG = null;
					} else {
						this.ERROR_AVG = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ERROR_STD = null;
					} else {
						this.ERROR_STD = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ERROR_MAX = null;
					} else {
						this.ERROR_MAX = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.CORRECT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.CORRECT);
				}

				// Double

				if (this.INCORRECT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.INCORRECT);
				}

				// Double

				if (this.ERROR_MIN == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ERROR_MIN);
				}

				// Double

				if (this.ERROR_AVG == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ERROR_AVG);
				}

				// Double

				if (this.ERROR_STD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ERROR_STD);
				}

				// Double

				if (this.ERROR_MAX == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ERROR_MAX);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CORRECT=" + String.valueOf(CORRECT));
			sb.append(",INCORRECT=" + String.valueOf(INCORRECT));
			sb.append(",ERROR_MIN=" + String.valueOf(ERROR_MIN));
			sb.append(",ERROR_AVG=" + String.valueOf(ERROR_AVG));
			sb.append(",ERROR_STD=" + String.valueOf(ERROR_STD));
			sb.append(",ERROR_MAX=" + String.valueOf(ERROR_MAX));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public Double CORRECT;

		public Double getCORRECT() {
			return this.CORRECT;
		}

		public Double INCORRECT;

		public Double getINCORRECT() {
			return this.INCORRECT;
		}

		public Double ERROR_MIN;

		public Double getERROR_MIN() {
			return this.ERROR_MIN;
		}

		public Double ERROR_AVG;

		public Double getERROR_AVG() {
			return this.ERROR_AVG;
		}

		public Double ERROR_STD;

		public Double getERROR_STD() {
			return this.ERROR_STD;
		}

		public Double ERROR_MAX;

		public Double getERROR_MAX() {
			return this.ERROR_MAX;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.CORRECT = null;
					} else {
						this.CORRECT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.INCORRECT = null;
					} else {
						this.INCORRECT = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ERROR_MIN = null;
					} else {
						this.ERROR_MIN = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ERROR_AVG = null;
					} else {
						this.ERROR_AVG = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ERROR_STD = null;
					} else {
						this.ERROR_STD = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ERROR_MAX = null;
					} else {
						this.ERROR_MAX = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Double

				if (this.CORRECT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.CORRECT);
				}

				// Double

				if (this.INCORRECT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.INCORRECT);
				}

				// Double

				if (this.ERROR_MIN == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ERROR_MIN);
				}

				// Double

				if (this.ERROR_AVG == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ERROR_AVG);
				}

				// Double

				if (this.ERROR_STD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ERROR_STD);
				}

				// Double

				if (this.ERROR_MAX == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ERROR_MAX);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CORRECT=" + String.valueOf(CORRECT));
			sb.append(",INCORRECT=" + String.valueOf(INCORRECT));
			sb.append(",ERROR_MIN=" + String.valueOf(ERROR_MIN));
			sb.append(",ERROR_AVG=" + String.valueOf(ERROR_AVG));
			sb.append(",ERROR_STD=" + String.valueOf(ERROR_STD));
			sb.append(",ERROR_MAX=" + String.valueOf(ERROR_MAX));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public Integer CORRECT;

		public Integer getCORRECT() {
			return this.CORRECT;
		}

		public Integer INCORRECT;

		public Integer getINCORRECT() {
			return this.INCORRECT;
		}

		public Double ERROR;

		public Double getERROR() {
			return this.ERROR;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.CORRECT = readInteger(dis);

					this.INCORRECT = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ERROR = null;
					} else {
						this.ERROR = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CORRECT, dos);

				// Integer

				writeInteger(this.INCORRECT, dos);

				// Double

				if (this.ERROR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.ERROR);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CORRECT=" + String.valueOf(CORRECT));
			sb.append(",INCORRECT=" + String.valueOf(INCORRECT));
			sb.append(",ERROR=" + String.valueOf(ERROR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		public String RESULT_LABEL;

		public String getRESULT_LABEL() {
			return this.RESULT_LABEL;
		}

		public Double RESULT_ERROR;

		public Double getRESULT_ERROR() {
			return this.RESULT_ERROR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

					this.RESULT_LABEL = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.RESULT_ERROR = null;
					} else {
						this.RESULT_ERROR = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

				// String

				writeString(this.RESULT_LABEL, dos);

				// Double

				if (this.RESULT_ERROR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.RESULT_ERROR);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append(",RESULT_LABEL=" + RESULT_LABEL);
			sb.append(",RESULT_ERROR=" + String.valueOf(RESULT_ERROR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		public String RESULT_LABEL;

		public String getRESULT_LABEL() {
			return this.RESULT_LABEL;
		}

		public Double RESULT_ERROR;

		public Double getRESULT_ERROR() {
			return this.RESULT_ERROR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

					this.RESULT_LABEL = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.RESULT_ERROR = null;
					} else {
						this.RESULT_ERROR = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

				// String

				writeString(this.RESULT_LABEL, dos);

				// Double

				if (this.RESULT_ERROR == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.RESULT_ERROR);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append(",RESULT_LABEL=" + RESULT_LABEL);
			sb.append(",RESULT_ERROR=" + String.valueOf(RESULT_ERROR));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public double sepalLength;

		public double getSepalLength() {
			return this.sepalLength;
		}

		public double sepalWidth;

		public double getSepalWidth() {
			return this.sepalWidth;
		}

		public double petalLength;

		public double getPetalLength() {
			return this.petalLength;
		}

		public double petalWidth;

		public double getPetalWidth() {
			return this.petalWidth;
		}

		public String species;

		public String getSpecies() {
			return this.species;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.sepalLength = dis.readDouble();

					this.sepalWidth = dis.readDouble();

					this.petalLength = dis.readDouble();

					this.petalWidth = dis.readDouble();

					this.species = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// double

				dos.writeDouble(this.sepalLength);

				// double

				dos.writeDouble(this.sepalWidth);

				// double

				dos.writeDouble(this.petalLength);

				// double

				dos.writeDouble(this.petalWidth);

				// String

				writeString(this.species, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sepalLength=" + String.valueOf(sepalLength));
			sb.append(",sepalWidth=" + String.valueOf(sepalWidth));
			sb.append(",petalLength=" + String.valueOf(petalLength));
			sb.append(",petalWidth=" + String.valueOf(petalWidth));
			sb.append(",species=" + species);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tBufferInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				row8Struct row8 = new row8Struct();
				row8Struct row16 = row8;
				row9Struct row9 = new row9Struct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Double CORRECT_sum;
					int CORRECT_count = 0;

					Double INCORRECT_sum;
					int INCORRECT_count = 0;
					BigDecimal ERROR_AVG_sum;
					int ERROR_AVG_count = 0;

					Double ERROR_MAX_max;
					Double ERROR_MIN_min;
					java.util.List<Double> ERROR_STD_std_dev = new java.util.ArrayList<Double>();

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				row9Struct row9_tmp = new row9Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFlowMeter_19 begin ] start
				 */

				ok_Hash.put("tFlowMeter_19", false);
				start_Hash.put("tFlowMeter_19", System.currentTimeMillis());

				currentComponent = "tFlowMeter_19";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tFlowMeter_19 = 0;

				int count_tFlowMeter_19 = 0;

				/**
				 * [tFlowMeter_19 begin ] stop
				 */

				/**
				 * [tShujuPredict_1 begin ] start
				 */

				ok_Hash.put("tShujuPredict_1", false);
				start_Hash.put("tShujuPredict_1", System.currentTimeMillis());

				currentComponent = "tShujuPredict_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tShujuPredict_1 = 0;

				int nb_line_tShujuPredict_1 = 0;

				com.github.romualdrousseau.shuju.IClassifier classifier_tShujuPredict_1 = (com.github.romualdrousseau.shuju.IClassifier) globalMap
						.get("classifier_tShujuTrain_1");

				/**
				 * [tShujuPredict_1 begin ] stop
				 */

				/**
				 * [tBufferInput_1 begin ] start
				 */

				ok_Hash.put("tBufferInput_1", false);
				start_Hash.put("tBufferInput_1", System.currentTimeMillis());

				currentComponent = "tBufferInput_1";

				int tos_count_tBufferInput_1 = 0;

				int nb_line_tBufferInput_1 = 0;

				String[] row_tBufferInput_1 = new String[5];
				for (int n = 0; n < globalBuffer.size(); n++) {
					row_tBufferInput_1 = (String[]) globalBuffer.get(n);
					if (0 < row_tBufferInput_1.length) {

						row10.sepalLength = ParserUtils.parseTo_double(row_tBufferInput_1[0]);

					}

					if (1 < row_tBufferInput_1.length) {

						row10.sepalWidth = ParserUtils.parseTo_double(row_tBufferInput_1[1]);

					}

					if (2 < row_tBufferInput_1.length) {

						row10.petalLength = ParserUtils.parseTo_double(row_tBufferInput_1[2]);

					}

					if (3 < row_tBufferInput_1.length) {

						row10.petalWidth = ParserUtils.parseTo_double(row_tBufferInput_1[3]);

					}

					if (4 < row_tBufferInput_1.length) {

						row10.species = row_tBufferInput_1[4];

					}

					else {
						row10.species = null;
					}

					/**
					 * [tBufferInput_1 begin ] stop
					 */

					/**
					 * [tBufferInput_1 main ] start
					 */

					currentComponent = "tBufferInput_1";

					tos_count_tBufferInput_1++;

					/**
					 * [tBufferInput_1 main ] stop
					 */

					/**
					 * [tBufferInput_1 process_data_begin ] start
					 */

					currentComponent = "tBufferInput_1";

					/**
					 * [tBufferInput_1 process_data_begin ] stop
					 */

					/**
					 * [tShujuPredict_1 main ] start
					 */

					currentComponent = "tShujuPredict_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
					}

					com.github.romualdrousseau.shuju.DataRow row_tShujuPredict_1 = new com.github.romualdrousseau.shuju.DataRow();
					com.github.romualdrousseau.shuju.features.NumericFeature feature_sepalLength_tShujuPredict_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row10.sepalLength);
					row_tShujuPredict_1.addFeature(feature_sepalLength_tShujuPredict_1);
					row8.sepalLength = row10.sepalLength;
					com.github.romualdrousseau.shuju.features.NumericFeature feature_sepalWidth_tShujuPredict_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row10.sepalWidth);
					row_tShujuPredict_1.addFeature(feature_sepalWidth_tShujuPredict_1);
					row8.sepalWidth = row10.sepalWidth;
					com.github.romualdrousseau.shuju.features.NumericFeature feature_petalLength_tShujuPredict_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row10.petalLength);
					row_tShujuPredict_1.addFeature(feature_petalLength_tShujuPredict_1);
					row8.petalLength = row10.petalLength;
					com.github.romualdrousseau.shuju.features.NumericFeature feature_petalWidth_tShujuPredict_1 = new com.github.romualdrousseau.shuju.features.NumericFeature(
							row10.petalWidth);
					row_tShujuPredict_1.addFeature(feature_petalWidth_tShujuPredict_1);
					row8.petalWidth = row10.petalWidth;
					com.github.romualdrousseau.shuju.features.StringFeature feature_species_tShujuPredict_1 = new com.github.romualdrousseau.shuju.features.StringFeature(
							row10.species);
					row_tShujuPredict_1.setLabel(feature_species_tShujuPredict_1);
					row8.species = row10.species;
					com.github.romualdrousseau.shuju.Result result = classifier_tShujuPredict_1
							.predict(row_tShujuPredict_1);
					row8.RESULT_LABEL = (String) result.getLabel().getValue();
					row8.RESULT_ERROR = result.getError();

					nb_line_tShujuPredict_1++;

					tos_count_tShujuPredict_1++;

					/**
					 * [tShujuPredict_1 main ] stop
					 */

					/**
					 * [tShujuPredict_1 process_data_begin ] start
					 */

					currentComponent = "tShujuPredict_1";

					/**
					 * [tShujuPredict_1 process_data_begin ] stop
					 */

					/**
					 * [tFlowMeter_19 main ] start
					 */

					currentComponent = "tFlowMeter_19";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
					}

					count_tFlowMeter_19++;

					row16 = row8;

					tos_count_tFlowMeter_19++;

					/**
					 * [tFlowMeter_19 main ] stop
					 */

					/**
					 * [tFlowMeter_19 process_data_begin ] start
					 */

					currentComponent = "tFlowMeter_19";

					/**
					 * [tFlowMeter_19 process_data_begin ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row16");
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						row9 = null;

// # Output table : 'row9'
						row9_tmp.CORRECT = row16.species.equals(row16.RESULT_LABEL) ? 1 : 0;
						row9_tmp.INCORRECT = row16.species.equals(row16.RESULT_LABEL) ? 0 : 1;
						row9_tmp.ERROR = row16.RESULT_ERROR;
						row9 = row9_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */

					/**
					 * [tMap_1 process_data_begin ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_begin ] stop
					 */
// Start of branch "row9"
					if (row9 != null) {

						/**
						 * [tAggregateRow_1_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
						}

						operation_finder_tAggregateRow_1.hashCodeDirty = true;

						operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

						boolean isFirstAdd_tAggregateRow_1 = false;

						if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

							isFirstAdd_tAggregateRow_1 = true;

							hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
									operation_result_tAggregateRow_1);

						} // G_OutMain_AggR_001

						operation_result_tAggregateRow_1.CORRECT_count++;

						if (operation_result_tAggregateRow_1.CORRECT_sum == null) {
							operation_result_tAggregateRow_1.CORRECT_sum = (double) 0;
						}

						if (row9.CORRECT != null)
							operation_result_tAggregateRow_1.CORRECT_sum += row9.CORRECT;
						operation_result_tAggregateRow_1.INCORRECT_count++;

						if (operation_result_tAggregateRow_1.INCORRECT_sum == null) {
							operation_result_tAggregateRow_1.INCORRECT_sum = (double) 0;
						}

						if (row9.INCORRECT != null)
							operation_result_tAggregateRow_1.INCORRECT_sum += row9.INCORRECT;
						operation_result_tAggregateRow_1.ERROR_AVG_count++;

						if (operation_result_tAggregateRow_1.ERROR_AVG_sum == null) {
							operation_result_tAggregateRow_1.ERROR_AVG_sum = new BigDecimal(0).setScale(0);
						}
						operation_result_tAggregateRow_1.ERROR_AVG_sum = operation_result_tAggregateRow_1.ERROR_AVG_sum
								.add(new BigDecimal(String.valueOf(row9.ERROR)));

						if (operation_result_tAggregateRow_1.ERROR_MAX_max == null
								|| row9.ERROR > operation_result_tAggregateRow_1.ERROR_MAX_max

						) {
							operation_result_tAggregateRow_1.ERROR_MAX_max = row9.ERROR;
						}

						if (operation_result_tAggregateRow_1.ERROR_MIN_min == null
								|| row9.ERROR < operation_result_tAggregateRow_1.ERROR_MIN_min

						) {
							operation_result_tAggregateRow_1.ERROR_MIN_min = row9.ERROR;
						}
						operation_result_tAggregateRow_1.ERROR_STD_std_dev.add((double) row9.ERROR);

						tos_count_tAggregateRow_1_AGGOUT++;

						/**
						 * [tAggregateRow_1_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						/**
						 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_1_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_1";

						currentComponent = "tAggregateRow_1_AGGOUT";

						/**
						 * [tAggregateRow_1_AGGOUT process_data_end ] stop
						 */

					} // End of branch "row9"

					/**
					 * [tMap_1 process_data_end ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeter_19 process_data_end ] start
					 */

					currentComponent = "tFlowMeter_19";

					/**
					 * [tFlowMeter_19 process_data_end ] stop
					 */

					/**
					 * [tShujuPredict_1 process_data_end ] start
					 */

					currentComponent = "tShujuPredict_1";

					/**
					 * [tShujuPredict_1 process_data_end ] stop
					 */

					/**
					 * [tBufferInput_1 process_data_end ] start
					 */

					currentComponent = "tBufferInput_1";

					/**
					 * [tBufferInput_1 process_data_end ] stop
					 */

					/**
					 * [tBufferInput_1 end ] start
					 */

					currentComponent = "tBufferInput_1";

					nb_line_tBufferInput_1++;
				}
				globalMap.put("tBufferInput_1_NB_LINE", nb_line_tBufferInput_1);

				ok_Hash.put("tBufferInput_1", true);
				end_Hash.put("tBufferInput_1", System.currentTimeMillis());

				/**
				 * [tBufferInput_1 end ] stop
				 */

				/**
				 * [tShujuPredict_1 end ] start
				 */

				currentComponent = "tShujuPredict_1";

				globalMap.put("tShujuPredict_1_NB_LINE", nb_line_tShujuPredict_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tShujuPredict_1", true);
				end_Hash.put("tShujuPredict_1", System.currentTimeMillis());

				/**
				 * [tShujuPredict_1 end ] stop
				 */

				/**
				 * [tFlowMeter_19 end ] start
				 */

				currentComponent = "tFlowMeter_19";

				tFlowMeterCatcher_1.addMessage("row8", new Integer(count_tFlowMeter_19), "null", "", "tFlowMeter_19");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tFlowMeter_19", true);
				end_Hash.put("tFlowMeter_19", System.currentTimeMillis());

				/**
				 * [tFlowMeter_19 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth, int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_1";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null && row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 9;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth - title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "CORRECT");
						for (int i = 0; i < titleWidth - "CORRECT".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null && i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "INCORRECT");
						for (int i = 0; i < titleWidth - "INCORRECT".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[1]);
						for (int i = 0; row[1] == null && i < dataWidth - 3
								|| row[1] != null && i < dataWidth - row[1].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "ERROR_MIN");
						for (int i = 0; i < titleWidth - "ERROR_MIN".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[2]);
						for (int i = 0; row[2] == null && i < dataWidth - 3
								|| row[2] != null && i < dataWidth - row[2].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "ERROR_AVG");
						for (int i = 0; i < titleWidth - "ERROR_AVG".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[3]);
						for (int i = 0; row[3] == null && i < dataWidth - 3
								|| row[3] != null && i < dataWidth - row[3].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "ERROR_STD");
						for (int i = 0; i < titleWidth - "ERROR_STD".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[4]);
						for (int i = 0; row[4] == null && i < dataWidth - 3
								|| row[4] != null && i < dataWidth - row[4].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "ERROR_MAX");
						for (int i = 0; i < titleWidth - "ERROR_MAX".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[5]);
						for (int i = 0; row[5] == null && i < dataWidth - 3
								|| row[5] != null && i < dataWidth - row[5].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					if (aggregated_row_tAggregateRow_1.CORRECT_count > 0) {

						double row11_CORRECT_temp = (double) aggregated_row_tAggregateRow_1.CORRECT_sum
								/ (double) aggregated_row_tAggregateRow_1.CORRECT_count;

						row11.CORRECT = (double) row11_CORRECT_temp;

					} else {
						String count = "0";

						row11.CORRECT = ParserUtils.parseTo_Double(count);

					}
					if (aggregated_row_tAggregateRow_1.INCORRECT_count > 0) {

						double row11_INCORRECT_temp = (double) aggregated_row_tAggregateRow_1.INCORRECT_sum
								/ (double) aggregated_row_tAggregateRow_1.INCORRECT_count;

						row11.INCORRECT = (double) row11_INCORRECT_temp;

					} else {
						String count = "0";

						row11.INCORRECT = ParserUtils.parseTo_Double(count);

					}
					row11.ERROR_MIN = aggregated_row_tAggregateRow_1.ERROR_MIN_min;
					if (aggregated_row_tAggregateRow_1.ERROR_AVG_count > 0) {

						row11.ERROR_AVG = aggregated_row_tAggregateRow_1.ERROR_AVG_sum
								.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.ERROR_AVG_count)),
										10, BigDecimal.ROUND_HALF_UP)

								.doubleValue()

						;

					} else {
						String count = "0";

						row11.ERROR_AVG = ParserUtils.parseTo_Double(count);

					}
					row11.ERROR_STD = (double) utilClass_tAggregateRow_1
							.sd(aggregated_row_tAggregateRow_1.ERROR_STD_std_dev.toArray(new Double[0]));

					row11.ERROR_MAX = aggregated_row_tAggregateRow_1.ERROR_MAX_max;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
					}

///////////////////////		

					strBuffer_tLogRow_1 = new StringBuilder();

					if (row11.CORRECT != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row11.CORRECT));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.INCORRECT != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row11.INCORRECT));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.ERROR_MIN != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row11.ERROR_MIN));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.ERROR_AVG != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row11.ERROR_AVG));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.ERROR_STD != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row11.ERROR_STD));

					} //

					strBuffer_tLogRow_1.append("|");

					if (row11.ERROR_MAX != null) { //

						strBuffer_tLogRow_1.append(FormatterUtils.formatUnwithE(row11.ERROR_MAX));

					} //

					String[] row_tLogRow_1 = new String[6];

					if (row11.CORRECT != null) { //
						row_tLogRow_1[0] = FormatterUtils.formatUnwithE(row11.CORRECT);

					} //

					if (row11.INCORRECT != null) { //
						row_tLogRow_1[1] = FormatterUtils.formatUnwithE(row11.INCORRECT);

					} //

					if (row11.ERROR_MIN != null) { //
						row_tLogRow_1[2] = FormatterUtils.formatUnwithE(row11.ERROR_MIN);

					} //

					if (row11.ERROR_AVG != null) { //
						row_tLogRow_1[3] = FormatterUtils.formatUnwithE(row11.ERROR_AVG);

					} //

					if (row11.ERROR_STD != null) { //
						row_tLogRow_1[4] = FormatterUtils.formatUnwithE(row11.ERROR_STD);

					} //

					if (row11.ERROR_MAX != null) { //
						row_tLogRow_1[5] = FormatterUtils.formatUnwithE(row11.ERROR_MAX);

					} //

					nb_line_tLogRow_1++;
					consoleOut_tLogRow_1.println(util_tLogRow_1.print(row_tLogRow_1, nb_line_tLogRow_1));
					consoleOut_tLogRow_1.flush();
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

			tFlowMeterCatcher_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tBufferInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tChronometerStop_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tBufferInput_1 finally ] start
				 */

				currentComponent = "tBufferInput_1";

				/**
				 * [tBufferInput_1 finally ] stop
				 */

				/**
				 * [tShujuPredict_1 finally ] start
				 */

				currentComponent = "tShujuPredict_1";

				/**
				 * [tShujuPredict_1 finally ] stop
				 */

				/**
				 * [tFlowMeter_19 finally ] start
				 */

				currentComponent = "tFlowMeter_19";

				/**
				 * [tFlowMeter_19 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 1);
	}

	public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tChronometerStop_1 begin ] start
				 */

				ok_Hash.put("tChronometerStop_1", false);
				start_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				currentComponent = "tChronometerStop_1";

				int tos_count_tChronometerStop_1 = 0;

				long timetChronometerStop_1;

				timetChronometerStop_1 = System.currentTimeMillis() - startTime;

				System.out.print("[ tChronometerStop_1 ]  ");

				System.out.print("   " + timetChronometerStop_1 / 1000 + "seconds   ");

				System.out.println("" + "  " + timetChronometerStop_1 + " milliseconds");

				Long currentTimetChronometerStop_1 = System.currentTimeMillis();
				globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);

				globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
				globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);

				/**
				 * [tChronometerStop_1 begin ] stop
				 */

				/**
				 * [tChronometerStop_1 main ] start
				 */

				currentComponent = "tChronometerStop_1";

				tos_count_tChronometerStop_1++;

				/**
				 * [tChronometerStop_1 main ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_begin ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_begin ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_end ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_end ] stop
				 */

				/**
				 * [tChronometerStop_1 end ] start
				 */

				currentComponent = "tChronometerStop_1";

				ok_Hash.put("tChronometerStop_1", true);
				end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				/**
				 * [tChronometerStop_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tChronometerStop_1 finally ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_SAMPLES_KnnSample = new byte[0];
		static byte[] commonByteArray_SAMPLES_KnnSample = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SAMPLES_KnnSample.length) {
					if (length < 1024 && commonByteArray_SAMPLES_KnnSample.length == 0) {
						commonByteArray_SAMPLES_KnnSample = new byte[1024];
					} else {
						commonByteArray_SAMPLES_KnnSample = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SAMPLES_KnnSample, 0, length);
				strReturn = new String(commonByteArray_SAMPLES_KnnSample, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SAMPLES_KnnSample) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tFlowMeterCatcher_1 begin ] start
				 */

				ok_Hash.put("tFlowMeterCatcher_1", false);
				start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				currentComponent = "tFlowMeterCatcher_1";

				int tos_count_tFlowMeterCatcher_1 = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
					row13.pid = pid;
					row13.root_pid = rootPid;
					row13.father_pid = fatherPid;
					row13.project = projectName;
					row13.job = jobName;
					row13.context = contextStr;
					row13.origin = (mcm.getOrigin() == null || mcm.getOrigin().length() < 1 ? null : mcm.getOrigin());
					row13.moment = mcm.getMoment();
					row13.job_version = mcm.getJobVersion();
					row13.job_repository_id = mcm.getJobId();
					row13.system_pid = mcm.getSystemPid();
					row13.label = mcm.getLabel();
					row13.count = mcm.getCount();
					row13.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense() + "_count");
					row13.thresholds = mcm.getThresholds();

					/**
					 * [tFlowMeterCatcher_1 begin ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 main ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					tos_count_tFlowMeterCatcher_1++;

					/**
					 * [tFlowMeterCatcher_1 main ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 main ] start
					 */

					currentComponent = "tLogRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
					}

///////////////////////		

					strBuffer_tLogRow_2 = new StringBuilder();

					if (row13.moment != null) { //

						strBuffer_tLogRow_2.append(FormatterUtils.format_Date(row13.moment, "yyyy-MM-dd HH:mm:ss"));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.pid != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.pid));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.father_pid != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.father_pid));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.root_pid != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.root_pid));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.system_pid != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.system_pid));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.project != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.project));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.job != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.job));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.job_repository_id != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.job_repository_id));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.job_version != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.job_version));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.context != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.context));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.origin != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.origin));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.label != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.label));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.count != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.count));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.reference != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.reference));

					} //

					strBuffer_tLogRow_2.append("|");

					if (row13.thresholds != null) { //

						strBuffer_tLogRow_2.append(String.valueOf(row13.thresholds));

					} //

					if (globalMap.get("tLogRow_CONSOLE") != null) {
						consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
					} else {
						consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
						globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
					}
					consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
					consoleOut_tLogRow_2.flush();
					nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_2++;

					/**
					 * [tLogRow_2 main ] stop
					 */

					/**
					 * [tLogRow_2 process_data_begin ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 process_data_end ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

				}

				ok_Hash.put("tFlowMeterCatcher_1", true);
				end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				/**
				 * [tFlowMeterCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFlowMeterCatcher_1 finally ] start
				 */

				currentComponent = "tFlowMeterCatcher_1";

				/**
				 * [tFlowMeterCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final KnnSample KnnSampleClass = new KnnSample();

		int exitCode = KnnSampleClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = (String[][]) globalBuffer.toArray(new String[globalBuffer.size()][]);

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		hastBufferOutput = true;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = KnnSample.class.getClassLoader()
					.getResourceAsStream("samples/knnsample_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = KnnSample.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tFileInputDelimited_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get()).get("status"))) {
						((java.util.Map) threadLocal.get()).put("status", "end");
					}
				} catch (TalendException e_tFileInputDelimited_1) {
					globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

					e_tFileInputDelimited_1.printStackTrace();

				} catch (java.lang.Error e_tFileInputDelimited_1) {
					globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get()).put("status", "failure");
					throw e_tFileInputDelimited_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : KnnSample");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 215243 characters generated by Talend Open Studio for Big Data on the 21
 * July, 2020 4:34:06 PM SGT
 ************************************************************************************************/